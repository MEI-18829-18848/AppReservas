package com.appreservas.generated;

import com.appreservas.reservas.cliente.Cliente;
import com.appreservas.reservas.cliente.generated.GeneratedClienteCacheHolder;
import com.appreservas.reservas.evento.Evento;
import com.appreservas.reservas.evento.generated.GeneratedEventoCacheHolder;
import com.appreservas.reservas.lugar.Lugar;
import com.appreservas.reservas.lugar.generated.GeneratedLugarCacheHolder;
import com.appreservas.reservas.organizador.Organizador;
import com.appreservas.reservas.organizador.generated.GeneratedOrganizadorCacheHolder;
import com.appreservas.reservas.reserva.Reserva;
import com.appreservas.reservas.reserva.generated.GeneratedReservaCacheHolder;
import com.appreservas.reservas.reservalugar.Reservalugar;
import com.appreservas.reservas.reservalugar.generated.GeneratedReservalugarCacheHolder;
import com.appreservas.reservas.sala.Sala;
import com.appreservas.reservas.sala.generated.GeneratedSalaCacheHolder;
import com.appreservas.reservas.sessao.Sessao;
import com.appreservas.reservas.sessao.generated.GeneratedSessaoCacheHolder;
import com.appreservas.reservas.utilizador.Utilizador;
import com.appreservas.reservas.utilizador.generated.GeneratedUtilizadorCacheHolder;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.enterprise.datastore.runtime.DataStoreHolder;
import com.speedment.enterprise.datastore.runtime.entitystore.EntityStore;
import com.speedment.enterprise.datastore.runtime.entitystore.EntityStoreHolder;
import com.speedment.enterprise.datastore.runtime.fieldcache.FieldCache;
import com.speedment.enterprise.datastore.runtime.fieldcache.MultiFieldCache;
import com.speedment.enterprise.datastore.runtime.statistic.Statistics;
import com.speedment.enterprise.datastore.runtime.util.StatisticsUtil;
import com.speedment.runtime.config.identifier.ColumnIdentifier;

import java.util.Optional;
import java.util.stream.Stream;

import static java.util.Objects.requireNonNull;

/**
 * A holder class for the various caches that are used to speed up the project.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public final class GeneratedReservasDataStoreHolder implements DataStoreHolder {
    
    private final GeneratedClienteCacheHolder clienteHolder;
    private final GeneratedEventoCacheHolder eventoHolder;
    private final GeneratedLugarCacheHolder lugarHolder;
    private final GeneratedOrganizadorCacheHolder organizadorHolder;
    private final GeneratedReservaCacheHolder reservaHolder;
    private final GeneratedReservalugarCacheHolder reservalugarHolder;
    private final GeneratedSalaCacheHolder salaHolder;
    private final GeneratedSessaoCacheHolder sessaoHolder;
    private final GeneratedUtilizadorCacheHolder utilizadorHolder;
    
    public GeneratedReservasDataStoreHolder(
            GeneratedClienteCacheHolder clienteHolder,
            GeneratedEventoCacheHolder eventoHolder,
            GeneratedLugarCacheHolder lugarHolder,
            GeneratedOrganizadorCacheHolder organizadorHolder,
            GeneratedReservaCacheHolder reservaHolder,
            GeneratedReservalugarCacheHolder reservalugarHolder,
            GeneratedSalaCacheHolder salaHolder,
            GeneratedSessaoCacheHolder sessaoHolder,
            GeneratedUtilizadorCacheHolder utilizadorHolder) {
        this.clienteHolder      = requireNonNull(clienteHolder);
        this.eventoHolder       = requireNonNull(eventoHolder);
        this.lugarHolder        = requireNonNull(lugarHolder);
        this.organizadorHolder  = requireNonNull(organizadorHolder);
        this.reservaHolder      = requireNonNull(reservaHolder);
        this.reservalugarHolder = requireNonNull(reservalugarHolder);
        this.salaHolder         = requireNonNull(salaHolder);
        this.sessaoHolder       = requireNonNull(sessaoHolder);
        this.utilizadorHolder   = requireNonNull(utilizadorHolder);
    }
    
    @Override
    @SuppressWarnings("unchecked")
    public <ENTITY> EntityStore<ENTITY> getEntityStore(
            String dbmsName,
            String schemaName,
            String tableName) {
        switch (tableName) {
            case "cliente"      : return (EntityStore<ENTITY>) clienteHolder.getEntityStore();
            case "evento"       : return (EntityStore<ENTITY>) eventoHolder.getEntityStore();
            case "lugar"        : return (EntityStore<ENTITY>) lugarHolder.getEntityStore();
            case "organizador"  : return (EntityStore<ENTITY>) organizadorHolder.getEntityStore();
            case "reserva"      : return (EntityStore<ENTITY>) reservaHolder.getEntityStore();
            case "reservalugar" : return (EntityStore<ENTITY>) reservalugarHolder.getEntityStore();
            case "sala"         : return (EntityStore<ENTITY>) salaHolder.getEntityStore();
            case "sessao"       : return (EntityStore<ENTITY>) sessaoHolder.getEntityStore();
            case "utilizador"   : return (EntityStore<ENTITY>) utilizadorHolder.getEntityStore();
            default : throw new UnsupportedOperationException(
                String.format("Could not find '%s' in database model.", tableName)
            );
        }
    }
    
    @Override
    @SuppressWarnings("unchecked")
    public <ENTITY, CACHE extends FieldCache<CACHE>> CACHE getFieldCache(ColumnIdentifier<ENTITY> columnId) {
        switch (columnId.getTableId()) {
            case "cliente"      : return (CACHE) clienteHolder.getFieldCache((ColumnIdentifier<Cliente>) columnId);
            case "evento"       : return (CACHE) eventoHolder.getFieldCache((ColumnIdentifier<Evento>) columnId);
            case "lugar"        : return (CACHE) lugarHolder.getFieldCache((ColumnIdentifier<Lugar>) columnId);
            case "organizador"  : return (CACHE) organizadorHolder.getFieldCache((ColumnIdentifier<Organizador>) columnId);
            case "reserva"      : return (CACHE) reservaHolder.getFieldCache((ColumnIdentifier<Reserva>) columnId);
            case "reservalugar" : return (CACHE) reservalugarHolder.getFieldCache((ColumnIdentifier<Reservalugar>) columnId);
            case "sala"         : return (CACHE) salaHolder.getFieldCache((ColumnIdentifier<Sala>) columnId);
            case "sessao"       : return (CACHE) sessaoHolder.getFieldCache((ColumnIdentifier<Sessao>) columnId);
            case "utilizador"   : return (CACHE) utilizadorHolder.getFieldCache((ColumnIdentifier<Utilizador>) columnId);
            default : throw new UnsupportedOperationException(
                String.format("Could not find '%s' in database model.", columnId.getTableId())
            );
        }
    }
    
    @Override
    @SuppressWarnings("unchecked")
    public <ENTITY, T0, T1, CACHE extends MultiFieldCache<T0, T1, CACHE>> Optional<CACHE> getMultiFieldCache(ColumnIdentifier<ENTITY> firstColumnId, ColumnIdentifier<ENTITY> secondColumnId) {
        return Optional.empty(); // No multi-indexes are used in the project
    }
    
    @Override
    @SuppressWarnings("unchecked")
    public <ENTITY> boolean isHavingMultiFieldCache(ColumnIdentifier<ENTITY> columnId) {
        return false; // No multi-indexes are used in the project
    }
    
    @Override
    public void close() {
        holders().forEach(EntityStoreHolder::close);
    }
    
    @Override
    public Statistics getStatistics() {
        return StatisticsUtil.create(
            holders()
                .toArray(EntityStoreHolder[]::new)
        );
    }
    
    @Override
    public Stream<EntityStoreHolder<?>> holders() {
        return Stream.of(
            clienteHolder,
            eventoHolder,
            lugarHolder,
            organizadorHolder,
            reservaHolder,
            reservalugarHolder,
            salaHolder,
            sessaoHolder,
            utilizadorHolder
        );
    }
}