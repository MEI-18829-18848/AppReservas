package com.appreservas.reservas.lugar.generated;

import com.appreservas.reservas.lugar.Lugar;
import com.appreservas.reservas.lugar.LugarEntityStoreSerializerImpl;
import com.appreservas.reservas.lugar.LugarManager;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.common.tuple.Tuple2;
import com.speedment.common.tuple.Tuples;
import com.speedment.enterprise.datastore.runtime.entitystore.EntityStore;
import com.speedment.enterprise.datastore.runtime.entitystore.EntityStoreHolder;
import com.speedment.enterprise.datastore.runtime.fieldcache.FieldCache.OfComparable;
import com.speedment.enterprise.datastore.runtime.fieldcache.FieldCache.OfInt;
import com.speedment.enterprise.datastore.runtime.fieldcache.FieldCache.OfString;
import com.speedment.enterprise.datastore.runtime.fieldcache.FieldCache;
import com.speedment.enterprise.datastore.runtime.fieldcache.MultiFieldCache;
import com.speedment.enterprise.datastore.runtime.statistic.Statistics;
import com.speedment.enterprise.datastore.runtime.util.DataStoreHolderUtil;
import com.speedment.enterprise.datastore.runtime.util.StatisticsUtil;
import com.speedment.runtime.bulk.PersistOperation;
import com.speedment.runtime.bulk.RemoveOperation;
import com.speedment.runtime.bulk.UpdateOperation;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.ColumnLabel;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.component.StreamSupplierComponent;
import com.speedment.runtime.field.Field;
import com.speedment.runtime.field.trait.HasIdentifier;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.Collections;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.stream.Stream;

import static java.util.Objects.requireNonNull;
import static java.util.stream.Collectors.toMap;
import static java.util.stream.Collectors.toSet;

/**
 * A holder class for the various caches that are used to speed up the {@link
 * LugarManager}.
 * 
 * Generated by
 * com.speedment.enterprise.datastore.generator.internal.code.GeneratedEntityCacheHolderTranslator
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public final class GeneratedLugarCacheHolder implements EntityStoreHolder<Lugar> {
    
    private final EntityStore<Lugar> entityStore;
    private final OfInt fieldLugaridCache;
    private final OfInt fieldSalaidCache;
    private final OfString fieldNomeCache;
    private final OfInt fieldQuantidadeCache;
    private final OfComparable<BigDecimal> fieldValorCache;
    
    public GeneratedLugarCacheHolder(
            EntityStore<Lugar> entityStore,
            OfInt fieldLugaridCache,
            OfInt fieldSalaidCache,
            OfString fieldNomeCache,
            OfInt fieldQuantidadeCache,
            OfComparable<BigDecimal> fieldValorCache) {
        
        this.entityStore          = requireNonNull(entityStore);
        this.fieldLugaridCache    = requireNonNull(fieldLugaridCache);
        this.fieldSalaidCache     = requireNonNull(fieldSalaidCache);
        this.fieldNomeCache       = requireNonNull(fieldNomeCache);
        this.fieldQuantidadeCache = requireNonNull(fieldQuantidadeCache);
        this.fieldValorCache      = requireNonNull(fieldValorCache);
    }
    
    @Override
    public EntityStore<Lugar> getEntityStore() {
        return entityStore;
    }
    
    @Override
    @SuppressWarnings("unchecked")
    public <CACHE extends FieldCache<CACHE>> CACHE getFieldCache(ColumnIdentifier<Lugar> columnId) {
        if (columnId instanceof Lugar.Identifier) {
            final Lugar.Identifier _id = (Lugar.Identifier) columnId;
            switch (_id) {
                case LUGARID    : return (CACHE) fieldLugaridCache;
                case SALAID     : return (CACHE) fieldSalaidCache;
                case NOME       : return (CACHE) fieldNomeCache;
                case QUANTIDADE : return (CACHE) fieldQuantidadeCache;
                case VALOR      : return (CACHE) fieldValorCache;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = columnId.getColumnId();
            switch (_colName) {
                case "lugarid"    : return (CACHE) fieldLugaridCache;
                case "salaid"     : return (CACHE) fieldSalaidCache;
                case "nome"       : return (CACHE) fieldNomeCache;
                case "quantidade" : return (CACHE) fieldQuantidadeCache;
                case "valor"      : return (CACHE) fieldValorCache;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public boolean isHavingMultiFieldCache(ColumnIdentifier<Lugar> columnId) {
        return false;
    }
    
    public static CompletableFuture<GeneratedLugarCacheHolder> reload(StreamSupplierComponent streamSupplier, ExecutorService executor) {
        return reload(DataStoreHolderUtil.buildEntityStore(
            streamSupplier,
            executor,
            LugarEntityStoreSerializerImpl::new,
            TableIdentifier.of("appreservas", "reservas", "lugar")
        ), executor);
    }
    
    @Override
    public EntityStoreHolder<Lugar> recycleAndPersist(PersistOperation<Lugar> persistOperation) {
        return wrapped().recycleAndPersist(persistOperation);
    }
    
    @Override
    public EntityStoreHolder<Lugar> recycleAndRemove(RemoveOperation<Lugar> removeOperation) {
        return wrapped().recycleAndRemove(removeOperation);
    }
    
    @Override
    public EntityStoreHolder<Lugar> recycleAndUpdate(UpdateOperation<Lugar> updateOperation) {
        return wrapped().recycleAndUpdate(updateOperation);
    }
    
    private EntityStoreHolder<Lugar> wrapped() {
        // Use explicit type for Stream to improve compilation time.
        final Map<ColumnLabel, FieldCache<?>> fieldCaches = Stream.<Tuple2<HasIdentifier<Lugar>, FieldCache<?>>>of(
            Tuples.of(Lugar.LUGARID,   fieldLugaridCache),
            Tuples.of(Lugar.SALAID,    fieldSalaidCache),
            Tuples.of(Lugar.NOME,      fieldNomeCache),
            Tuples.of(Lugar.QUANTIDADE,fieldQuantidadeCache),
            Tuples.of(Lugar.VALOR,     fieldValorCache)
        )
            .collect(toMap(t2 -> t2.get0().identifier().label(), Tuple2::get1));
        final Map<ColumnLabel,  Map<ColumnLabel, MultiFieldCache<?, ?, ?>>>  multiFieldCaches = createMultiCacheMap();
        final Set<ColumnIdentifier<Lugar>> columnIdentifiers = Stream.<HasIdentifier<Lugar>>of(
            Lugar.LUGARID,
            Lugar.SALAID,
            Lugar.NOME,
            Lugar.QUANTIDADE,
            Lugar.VALOR
        )
            .map(HasIdentifier::identifier)
            .collect(toSet());
        return EntityStoreHolder.of(
            entityStore,
            fieldCaches,
            multiFieldCaches,
            columnIdentifiers
        );
    }
    
    public static CompletableFuture<GeneratedLugarCacheHolder> reload(CompletableFuture<EntityStore<Lugar>> entityStoreFuture, ExecutorService executor) {
        final CompletableFuture<FieldCache.OfInt> fieldLugaridCacheFuture =
            DataStoreHolderUtil.buildIntCache(entityStoreFuture, executor, Lugar.LUGARID, FieldCache.DISTINCT);
        
        final CompletableFuture<FieldCache.OfInt> fieldSalaidCacheFuture =
            DataStoreHolderUtil.buildIntCache(entityStoreFuture, executor, Lugar.SALAID, 0);
        
        final CompletableFuture<FieldCache.OfString> fieldNomeCacheFuture =
            DataStoreHolderUtil.buildStringCache(entityStoreFuture, executor, Lugar.NOME, 0);
        
        final CompletableFuture<FieldCache.OfInt> fieldQuantidadeCacheFuture =
            DataStoreHolderUtil.buildIntCache(entityStoreFuture, executor, Lugar.QUANTIDADE, 0);
        
        final CompletableFuture<FieldCache.OfComparable<BigDecimal>> fieldValorCacheFuture =
            DataStoreHolderUtil.buildComparableCache(entityStoreFuture, executor, Lugar.VALOR, 0);
        
        return entityStoreFuture.thenApplyAsync(entityStore -> {
            try {
                return new GeneratedLugarCacheHolder(
                    entityStore,
                    fieldLugaridCacheFuture.get(),
                    fieldSalaidCacheFuture.get(),
                    fieldNomeCacheFuture.get(),
                    fieldQuantidadeCacheFuture.get(),
                    fieldValorCacheFuture.get()
                );
            } catch (final ExecutionException | InterruptedException ex) {
                throw new RuntimeException(ex);
            }
        });
    }
    
    @Override
    public void close() {
        entityStore.close();
        fieldLugaridCache.close();
        fieldSalaidCache.close();
        fieldNomeCache.close();
        fieldQuantidadeCache.close();
        fieldValorCache.close();
    }
    
    @Override
    public Statistics getStatistics() {
        return StatisticsUtil.getStatistics(    
            this,
            entityStore.identifier(),
            Arrays.asList(
                Lugar.Identifier.LUGARID,
                Lugar.Identifier.SALAID,
                Lugar.Identifier.NOME,
                Lugar.Identifier.QUANTIDADE,
                Lugar.Identifier.VALOR
            )
        
        );
    }
    
    private Map<ColumnLabel, Map<ColumnLabel, MultiFieldCache<?, ?, ?>>> createMultiCacheMap() {
        return Collections.emptyMap();
    }
}