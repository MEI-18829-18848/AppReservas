package com.appreservas.reservas.lugar.generated;

import com.appreservas.reservas.lugar.Lugar;
import com.appreservas.reservas.sala.Sala;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.enterprise.datastore.runtime.field.DatastoreFields;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.manager.Manager;
import com.speedment.runtime.core.util.OptionalUtil;
import com.speedment.runtime.field.ComparableField;
import com.speedment.runtime.field.IntField;
import com.speedment.runtime.field.IntForeignKeyField;
import com.speedment.runtime.field.StringField;
import com.speedment.runtime.typemapper.TypeMapper;

import java.math.BigDecimal;
import java.util.Optional;
import java.util.OptionalInt;

/**
 * The generated base for the {@link
 * com.appreservas.reservas.lugar.Lugar}-interface representing
 * entities of the {@code lugar}-table in the database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public interface GeneratedLugar {
    
    /**
     * This Field corresponds to the {@link Lugar} field that can be obtained
     * using the {@link Lugar#getLugarid()} method.
     */
    IntField<Lugar, Integer> LUGARID = DatastoreFields.createIntField(
        Identifier.LUGARID,
        Lugar::getLugarid,
        Lugar::setLugarid,
        TypeMapper.primitive(),
        true
    );
    /**
     * This Field corresponds to the {@link Lugar} field that can be obtained
     * using the {@link Lugar#getSalaid()} method.
     */
    IntForeignKeyField<Lugar, Integer, Sala> SALAID = DatastoreFields.createIntForeignKeyField(
        Identifier.SALAID,
        Lugar::getSalaid,
        Lugar::setSalaid,
        Sala.SALAID,
        TypeMapper.primitive(),
        false
    );
    /**
     * This Field corresponds to the {@link Lugar} field that can be obtained
     * using the {@link Lugar#getNome()} method.
     */
    StringField<Lugar, String> NOME = DatastoreFields.createStringField(
        Identifier.NOME,
        o -> OptionalUtil.unwrap(o.getNome()),
        Lugar::setNome,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Lugar} field that can be obtained
     * using the {@link Lugar#getQuantidade()} method.
     */
    ComparableField<Lugar, Integer, Integer> QUANTIDADE = DatastoreFields.createComparableField(
        Identifier.QUANTIDADE,
        o -> OptionalUtil.unwrap(o.getQuantidade()),
        Lugar::setQuantidade,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Lugar} field that can be obtained
     * using the {@link Lugar#getValor()} method.
     */
    ComparableField<Lugar, BigDecimal, BigDecimal> VALOR = DatastoreFields.createComparableField(
        Identifier.VALOR,
        o -> OptionalUtil.unwrap(o.getValor()),
        Lugar::setValor,
        TypeMapper.identity(),
        false
    );
    
    /**
     * Returns the lugarid of this Lugar. The lugarid field corresponds to the
     * database column appreservas.reservas.lugar.lugarid.
     * 
     * @return the lugarid of this Lugar
     */
    int getLugarid();
    
    /**
     * Returns the salaid of this Lugar. The salaid field corresponds to the
     * database column appreservas.reservas.lugar.salaid.
     * 
     * @return the salaid of this Lugar
     */
    int getSalaid();
    
    /**
     * Returns the nome of this Lugar. The nome field corresponds to the
     * database column appreservas.reservas.lugar.nome.
     * 
     * @return the nome of this Lugar
     */
    Optional<String> getNome();
    
    /**
     * Returns the quantidade of this Lugar. The quantidade field corresponds to
     * the database column appreservas.reservas.lugar.quantidade.
     * 
     * @return the quantidade of this Lugar
     */
    OptionalInt getQuantidade();
    
    /**
     * Returns the valor of this Lugar. The valor field corresponds to the
     * database column appreservas.reservas.lugar.valor.
     * 
     * @return the valor of this Lugar
     */
    Optional<BigDecimal> getValor();
    
    /**
     * Sets the lugarid of this Lugar. The lugarid field corresponds to the
     * database column appreservas.reservas.lugar.lugarid.
     * 
     * @param lugarid to set of this Lugar
     * @return        this Lugar instance
     */
    Lugar setLugarid(int lugarid);
    
    /**
     * Sets the salaid of this Lugar. The salaid field corresponds to the
     * database column appreservas.reservas.lugar.salaid.
     * 
     * @param salaid to set of this Lugar
     * @return       this Lugar instance
     */
    Lugar setSalaid(int salaid);
    
    /**
     * Sets the nome of this Lugar. The nome field corresponds to the database
     * column appreservas.reservas.lugar.nome.
     * 
     * @param nome to set of this Lugar
     * @return     this Lugar instance
     */
    Lugar setNome(String nome);
    
    /**
     * Sets the quantidade of this Lugar. The quantidade field corresponds to
     * the database column appreservas.reservas.lugar.quantidade.
     * 
     * @param quantidade to set of this Lugar
     * @return           this Lugar instance
     */
    Lugar setQuantidade(Integer quantidade);
    
    /**
     * Sets the valor of this Lugar. The valor field corresponds to the database
     * column appreservas.reservas.lugar.valor.
     * 
     * @param valor to set of this Lugar
     * @return      this Lugar instance
     */
    Lugar setValor(BigDecimal valor);
    
    /**
     * Queries the specified manager for the referenced Sala. If no such Sala
     * exists, an {@code NullPointerException} will be thrown.
     * 
     * @param foreignManager the manager to query for the entity
     * @return               the foreign entity referenced
     */
    Sala findSalaid(Manager<Sala> foreignManager);
    
    enum Identifier implements ColumnIdentifier<Lugar> {
        
        LUGARID    ("lugarid"),
        SALAID     ("salaid"),
        NOME       ("nome"),
        QUANTIDADE ("quantidade"),
        VALOR      ("valor");
        
        private final String columnId;
        private final TableIdentifier<Lugar> tableIdentifier;
        
        Identifier(String columnId) {
            this.columnId        = columnId;
            this.tableIdentifier = TableIdentifier.of(    getDbmsId(), 
                getSchemaId(), 
                getTableId());
        }
        
        @Override
        public String getDbmsId() {
            return "appreservas";
        }
        
        @Override
        public String getSchemaId() {
            return "reservas";
        }
        
        @Override
        public String getTableId() {
            return "lugar";
        }
        
        @Override
        public String getColumnId() {
            return this.columnId;
        }
        
        @Override
        public TableIdentifier<Lugar> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}