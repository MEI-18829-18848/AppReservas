package com.appreservas.reservas.lugar.generated;

import com.appreservas.reservas.lugar.Lugar;
import com.appreservas.reservas.sala.Sala;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.core.manager.Manager;
import com.speedment.runtime.core.util.OptionalUtil;

import java.math.BigDecimal;
import java.util.Objects;
import java.util.Optional;
import java.util.OptionalInt;
import java.util.StringJoiner;

/**
 * The generated base implementation of the {@link
 * com.appreservas.reservas.lugar.Lugar}-interface.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedLugarImpl implements Lugar {
    
    private int lugarid;
    private int salaid;
    private String nome;
    private Integer quantidade;
    private BigDecimal valor;
    
    protected GeneratedLugarImpl() {}
    
    @Override
    public int getLugarid() {
        return lugarid;
    }
    
    @Override
    public int getSalaid() {
        return salaid;
    }
    
    @Override
    public Optional<String> getNome() {
        return Optional.ofNullable(nome);
    }
    
    @Override
    public OptionalInt getQuantidade() {
        return OptionalUtil.ofNullable(quantidade);
    }
    
    @Override
    public Optional<BigDecimal> getValor() {
        return Optional.ofNullable(valor);
    }
    
    @Override
    public Lugar setLugarid(int lugarid) {
        this.lugarid = lugarid;
        return this;
    }
    
    @Override
    public Lugar setSalaid(int salaid) {
        this.salaid = salaid;
        return this;
    }
    
    @Override
    public Lugar setNome(String nome) {
        this.nome = nome;
        return this;
    }
    
    @Override
    public Lugar setQuantidade(Integer quantidade) {
        this.quantidade = quantidade;
        return this;
    }
    
    @Override
    public Lugar setValor(BigDecimal valor) {
        this.valor = valor;
        return this;
    }
    
    @Override
    public Sala findSalaid(Manager<Sala> foreignManager) {
        return foreignManager.stream().filter(Sala.SALAID.equal(getSalaid())).findAny().orElse(null);
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("lugarid = "    + Objects.toString(getLugarid()));
        sj.add("salaid = "     + Objects.toString(getSalaid()));
        sj.add("nome = "       + Objects.toString(OptionalUtil.unwrap(getNome())));
        sj.add("quantidade = " + Objects.toString(OptionalUtil.unwrap(getQuantidade())));
        sj.add("valor = "      + Objects.toString(OptionalUtil.unwrap(getValor())));
        return "LugarImpl " + sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof Lugar)) { return false; }
        final Lugar thatLugar = (Lugar)that;
        if (this.getLugarid() != thatLugar.getLugarid()) { return false; }
        if (this.getSalaid() != thatLugar.getSalaid()) { return false; }
        if (!Objects.equals(this.getNome(), thatLugar.getNome())) { return false; }
        if (!Objects.equals(this.getQuantidade(), thatLugar.getQuantidade())) { return false; }
        if (!Objects.equals(this.getValor(), thatLugar.getValor())) { return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Integer.hashCode(getLugarid());
        hash = 31 * hash + Integer.hashCode(getSalaid());
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getNome()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getQuantidade()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getValor()));
        return hash;
    }
}