package com.appreservas.reservas.sala.generated;

import com.appreservas.reservas.sala.Sala;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.enterprise.datastore.runtime.field.DatastoreFields;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.util.OptionalUtil;
import com.speedment.runtime.field.BooleanField;
import com.speedment.runtime.field.ComparableField;
import com.speedment.runtime.field.IntField;
import com.speedment.runtime.field.StringField;
import com.speedment.runtime.typemapper.TypeMapper;

import java.util.Optional;
import java.util.OptionalInt;

/**
 * The generated base for the {@link
 * com.appreservas.reservas.sala.Sala}-interface representing
 * entities of the {@code sala}-table in the database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public interface GeneratedSala {
    
    /**
     * This Field corresponds to the {@link Sala} field that can be obtained
     * using the {@link Sala#getSalaid()} method.
     */
    IntField<Sala, Integer> SALAID = DatastoreFields.createIntField(
        Identifier.SALAID,
        Sala::getSalaid,
        Sala::setSalaid,
        TypeMapper.primitive(),
        true
    );
    /**
     * This Field corresponds to the {@link Sala} field that can be obtained
     * using the {@link Sala#getNome()} method.
     */
    StringField<Sala, String> NOME = DatastoreFields.createStringField(
        Identifier.NOME,
        o -> OptionalUtil.unwrap(o.getNome()),
        Sala::setNome,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Sala} field that can be obtained
     * using the {@link Sala#getLocalizacao()} method.
     */
    StringField<Sala, String> LOCALIZACAO = DatastoreFields.createStringField(
        Identifier.LOCALIZACAO,
        o -> OptionalUtil.unwrap(o.getLocalizacao()),
        Sala::setLocalizacao,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Sala} field that can be obtained
     * using the {@link Sala#getLugaresmarcados()} method.
     */
    BooleanField<Sala, Boolean> LUGARESMARCADOS = DatastoreFields.createBooleanField(
        Identifier.LUGARESMARCADOS,
        Sala::getLugaresmarcados,
        Sala::setLugaresmarcados,
        TypeMapper.primitive(),
        false
    );
    /**
     * This Field corresponds to the {@link Sala} field that can be obtained
     * using the {@link Sala#getLotacao()} method.
     */
    ComparableField<Sala, Integer, Integer> LOTACAO = DatastoreFields.createComparableField(
        Identifier.LOTACAO,
        o -> OptionalUtil.unwrap(o.getLotacao()),
        Sala::setLotacao,
        TypeMapper.identity(),
        false
    );
    
    /**
     * Returns the salaid of this Sala. The salaid field corresponds to the
     * database column appreservas.reservas.sala.salaid.
     * 
     * @return the salaid of this Sala
     */
    int getSalaid();
    
    /**
     * Returns the nome of this Sala. The nome field corresponds to the database
     * column appreservas.reservas.sala.nome.
     * 
     * @return the nome of this Sala
     */
    Optional<String> getNome();
    
    /**
     * Returns the localizacao of this Sala. The localizacao field corresponds
     * to the database column appreservas.reservas.sala.localizacao.
     * 
     * @return the localizacao of this Sala
     */
    Optional<String> getLocalizacao();
    
    /**
     * Returns the lugaresmarcados of this Sala. The lugaresmarcados field
     * corresponds to the database column
     * appreservas.reservas.sala.lugaresmarcados.
     * 
     * @return the lugaresmarcados of this Sala
     */
    boolean getLugaresmarcados();
    
    /**
     * Returns the lotacao of this Sala. The lotacao field corresponds to the
     * database column appreservas.reservas.sala.lotacao.
     * 
     * @return the lotacao of this Sala
     */
    OptionalInt getLotacao();
    
    /**
     * Sets the salaid of this Sala. The salaid field corresponds to the
     * database column appreservas.reservas.sala.salaid.
     * 
     * @param salaid to set of this Sala
     * @return       this Sala instance
     */
    Sala setSalaid(int salaid);
    
    /**
     * Sets the nome of this Sala. The nome field corresponds to the database
     * column appreservas.reservas.sala.nome.
     * 
     * @param nome to set of this Sala
     * @return     this Sala instance
     */
    Sala setNome(String nome);
    
    /**
     * Sets the localizacao of this Sala. The localizacao field corresponds to
     * the database column appreservas.reservas.sala.localizacao.
     * 
     * @param localizacao to set of this Sala
     * @return            this Sala instance
     */
    Sala setLocalizacao(String localizacao);
    
    /**
     * Sets the lugaresmarcados of this Sala. The lugaresmarcados field
     * corresponds to the database column
     * appreservas.reservas.sala.lugaresmarcados.
     * 
     * @param lugaresmarcados to set of this Sala
     * @return                this Sala instance
     */
    Sala setLugaresmarcados(boolean lugaresmarcados);
    
    /**
     * Sets the lotacao of this Sala. The lotacao field corresponds to the
     * database column appreservas.reservas.sala.lotacao.
     * 
     * @param lotacao to set of this Sala
     * @return        this Sala instance
     */
    Sala setLotacao(Integer lotacao);
    
    enum Identifier implements ColumnIdentifier<Sala> {
        
        SALAID          ("salaid"),
        NOME            ("nome"),
        LOCALIZACAO     ("localizacao"),
        LUGARESMARCADOS ("lugaresmarcados"),
        LOTACAO         ("lotacao");
        
        private final String columnId;
        private final TableIdentifier<Sala> tableIdentifier;
        
        Identifier(String columnId) {
            this.columnId        = columnId;
            this.tableIdentifier = TableIdentifier.of(    getDbmsId(), 
                getSchemaId(), 
                getTableId());
        }
        
        @Override
        public String getDbmsId() {
            return "appreservas";
        }
        
        @Override
        public String getSchemaId() {
            return "reservas";
        }
        
        @Override
        public String getTableId() {
            return "sala";
        }
        
        @Override
        public String getColumnId() {
            return this.columnId;
        }
        
        @Override
        public TableIdentifier<Sala> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}