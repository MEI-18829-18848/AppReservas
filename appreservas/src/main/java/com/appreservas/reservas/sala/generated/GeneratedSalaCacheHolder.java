package com.appreservas.reservas.sala.generated;

import com.appreservas.reservas.sala.Sala;
import com.appreservas.reservas.sala.SalaEntityStoreSerializerImpl;
import com.appreservas.reservas.sala.SalaManager;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.common.tuple.Tuple2;
import com.speedment.common.tuple.Tuples;
import com.speedment.enterprise.datastore.runtime.entitystore.EntityStore;
import com.speedment.enterprise.datastore.runtime.entitystore.EntityStoreHolder;
import com.speedment.enterprise.datastore.runtime.fieldcache.FieldCache.OfBoolean;
import com.speedment.enterprise.datastore.runtime.fieldcache.FieldCache.OfInt;
import com.speedment.enterprise.datastore.runtime.fieldcache.FieldCache.OfString;
import com.speedment.enterprise.datastore.runtime.fieldcache.FieldCache;
import com.speedment.enterprise.datastore.runtime.fieldcache.MultiFieldCache;
import com.speedment.enterprise.datastore.runtime.statistic.Statistics;
import com.speedment.enterprise.datastore.runtime.util.DataStoreHolderUtil;
import com.speedment.enterprise.datastore.runtime.util.StatisticsUtil;
import com.speedment.runtime.bulk.PersistOperation;
import com.speedment.runtime.bulk.RemoveOperation;
import com.speedment.runtime.bulk.UpdateOperation;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.ColumnLabel;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.component.StreamSupplierComponent;
import com.speedment.runtime.field.Field;
import com.speedment.runtime.field.trait.HasIdentifier;

import java.util.Arrays;
import java.util.Collections;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.stream.Stream;

import static java.util.Objects.requireNonNull;
import static java.util.stream.Collectors.toMap;
import static java.util.stream.Collectors.toSet;

/**
 * A holder class for the various caches that are used to speed up the {@link
 * SalaManager}.
 * 
 * Generated by
 * com.speedment.enterprise.datastore.generator.internal.code.GeneratedEntityCacheHolderTranslator
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public final class GeneratedSalaCacheHolder implements EntityStoreHolder<Sala> {
    
    private final EntityStore<Sala> entityStore;
    private final OfInt fieldSalaidCache;
    private final OfString fieldNomeCache;
    private final OfString fieldLocalizacaoCache;
    private final OfBoolean fieldLugaresmarcadosCache;
    private final OfInt fieldLotacaoCache;
    
    public GeneratedSalaCacheHolder(
            EntityStore<Sala> entityStore,
            OfInt fieldSalaidCache,
            OfString fieldNomeCache,
            OfString fieldLocalizacaoCache,
            OfBoolean fieldLugaresmarcadosCache,
            OfInt fieldLotacaoCache) {
        
        this.entityStore               = requireNonNull(entityStore);
        this.fieldSalaidCache          = requireNonNull(fieldSalaidCache);
        this.fieldNomeCache            = requireNonNull(fieldNomeCache);
        this.fieldLocalizacaoCache     = requireNonNull(fieldLocalizacaoCache);
        this.fieldLugaresmarcadosCache = requireNonNull(fieldLugaresmarcadosCache);
        this.fieldLotacaoCache         = requireNonNull(fieldLotacaoCache);
    }
    
    @Override
    public EntityStore<Sala> getEntityStore() {
        return entityStore;
    }
    
    @Override
    @SuppressWarnings("unchecked")
    public <CACHE extends FieldCache<CACHE>> CACHE getFieldCache(ColumnIdentifier<Sala> columnId) {
        if (columnId instanceof Sala.Identifier) {
            final Sala.Identifier _id = (Sala.Identifier) columnId;
            switch (_id) {
                case SALAID          : return (CACHE) fieldSalaidCache;
                case NOME            : return (CACHE) fieldNomeCache;
                case LOCALIZACAO     : return (CACHE) fieldLocalizacaoCache;
                case LUGARESMARCADOS : return (CACHE) fieldLugaresmarcadosCache;
                case LOTACAO         : return (CACHE) fieldLotacaoCache;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = columnId.getColumnId();
            switch (_colName) {
                case "salaid"          : return (CACHE) fieldSalaidCache;
                case "nome"            : return (CACHE) fieldNomeCache;
                case "localizacao"     : return (CACHE) fieldLocalizacaoCache;
                case "lugaresmarcados" : return (CACHE) fieldLugaresmarcadosCache;
                case "lotacao"         : return (CACHE) fieldLotacaoCache;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public boolean isHavingMultiFieldCache(ColumnIdentifier<Sala> columnId) {
        return false;
    }
    
    public static CompletableFuture<GeneratedSalaCacheHolder> reload(StreamSupplierComponent streamSupplier, ExecutorService executor) {
        return reload(DataStoreHolderUtil.buildEntityStore(
            streamSupplier,
            executor,
            SalaEntityStoreSerializerImpl::new,
            TableIdentifier.of("appreservas", "reservas", "sala")
        ), executor);
    }
    
    @Override
    public EntityStoreHolder<Sala> recycleAndPersist(PersistOperation<Sala> persistOperation) {
        return wrapped().recycleAndPersist(persistOperation);
    }
    
    @Override
    public EntityStoreHolder<Sala> recycleAndRemove(RemoveOperation<Sala> removeOperation) {
        return wrapped().recycleAndRemove(removeOperation);
    }
    
    @Override
    public EntityStoreHolder<Sala> recycleAndUpdate(UpdateOperation<Sala> updateOperation) {
        return wrapped().recycleAndUpdate(updateOperation);
    }
    
    private EntityStoreHolder<Sala> wrapped() {
        // Use explicit type for Stream to improve compilation time.
        final Map<ColumnLabel, FieldCache<?>> fieldCaches = Stream.<Tuple2<HasIdentifier<Sala>, FieldCache<?>>>of(
            Tuples.of(Sala.SALAID,         fieldSalaidCache),
            Tuples.of(Sala.NOME,           fieldNomeCache),
            Tuples.of(Sala.LOCALIZACAO,    fieldLocalizacaoCache),
            Tuples.of(Sala.LUGARESMARCADOS,fieldLugaresmarcadosCache),
            Tuples.of(Sala.LOTACAO,        fieldLotacaoCache)
        )
            .collect(toMap(t2 -> t2.get0().identifier().label(), Tuple2::get1));
        final Map<ColumnLabel,  Map<ColumnLabel, MultiFieldCache<?, ?, ?>>>  multiFieldCaches = createMultiCacheMap();
        final Set<ColumnIdentifier<Sala>> columnIdentifiers = Stream.<HasIdentifier<Sala>>of(
            Sala.SALAID,
            Sala.NOME,
            Sala.LOCALIZACAO,
            Sala.LUGARESMARCADOS,
            Sala.LOTACAO
        )
            .map(HasIdentifier::identifier)
            .collect(toSet());
        return EntityStoreHolder.of(
            entityStore,
            fieldCaches,
            multiFieldCaches,
            columnIdentifiers
        );
    }
    
    public static CompletableFuture<GeneratedSalaCacheHolder> reload(CompletableFuture<EntityStore<Sala>> entityStoreFuture, ExecutorService executor) {
        final CompletableFuture<FieldCache.OfInt> fieldSalaidCacheFuture =
            DataStoreHolderUtil.buildIntCache(entityStoreFuture, executor, Sala.SALAID, FieldCache.DISTINCT);
        
        final CompletableFuture<FieldCache.OfString> fieldNomeCacheFuture =
            DataStoreHolderUtil.buildStringCache(entityStoreFuture, executor, Sala.NOME, 0);
        
        final CompletableFuture<FieldCache.OfString> fieldLocalizacaoCacheFuture =
            DataStoreHolderUtil.buildStringCache(entityStoreFuture, executor, Sala.LOCALIZACAO, 0);
        
        final CompletableFuture<FieldCache.OfBoolean> fieldLugaresmarcadosCacheFuture =
            DataStoreHolderUtil.buildBooleanCache(entityStoreFuture, executor, Sala.LUGARESMARCADOS, 0);
        
        final CompletableFuture<FieldCache.OfInt> fieldLotacaoCacheFuture =
            DataStoreHolderUtil.buildIntCache(entityStoreFuture, executor, Sala.LOTACAO, 0);
        
        return entityStoreFuture.thenApplyAsync(entityStore -> {
            try {
                return new GeneratedSalaCacheHolder(
                    entityStore,
                    fieldSalaidCacheFuture.get(),
                    fieldNomeCacheFuture.get(),
                    fieldLocalizacaoCacheFuture.get(),
                    fieldLugaresmarcadosCacheFuture.get(),
                    fieldLotacaoCacheFuture.get()
                );
            } catch (final ExecutionException | InterruptedException ex) {
                throw new RuntimeException(ex);
            }
        });
    }
    
    @Override
    public void close() {
        entityStore.close();
        fieldSalaidCache.close();
        fieldNomeCache.close();
        fieldLocalizacaoCache.close();
        fieldLugaresmarcadosCache.close();
        fieldLotacaoCache.close();
    }
    
    @Override
    public Statistics getStatistics() {
        return StatisticsUtil.getStatistics(    
            this,
            entityStore.identifier(),
            Arrays.asList(
                Sala.Identifier.SALAID,
                Sala.Identifier.NOME,
                Sala.Identifier.LOCALIZACAO,
                Sala.Identifier.LUGARESMARCADOS,
                Sala.Identifier.LOTACAO
            )
        
        );
    }
    
    private Map<ColumnLabel, Map<ColumnLabel, MultiFieldCache<?, ?, ?>>> createMultiCacheMap() {
        return Collections.emptyMap();
    }
}