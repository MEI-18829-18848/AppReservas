package com.appreservas.reservas.reserva.generated;

import com.appreservas.reservas.reserva.Reserva;
import com.appreservas.reservas.reserva.ReservaManager;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.common.json.Json;
import com.speedment.enterprise.plugins.json.JsonCollectors;
import com.speedment.enterprise.plugins.json.JsonComponent;
import com.speedment.enterprise.plugins.json.JsonEncoder;
import com.speedment.enterprise.plugins.spring.runtime.AbstractFilter;
import com.speedment.enterprise.plugins.spring.runtime.AbstractSort;
import com.speedment.enterprise.plugins.spring.runtime.ControllerUtil;
import com.speedment.runtime.core.manager.FieldSet;
import com.speedment.runtime.core.manager.Persister;
import com.speedment.runtime.core.manager.Updater;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseStatus;

import java.math.BigDecimal;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import java.util.function.Predicate;
import java.util.stream.Stream;
import javax.annotation.PostConstruct;

import static java.util.stream.Collectors.toList;

/**
 * The default REST controller logic for Reserva entities.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
@CrossOrigin(origins = "*", maxAge = 3600)
@RequestMapping("/reservas")
public abstract class GeneratedReservaController {
    
    protected @Autowired JsonComponent jsonComponent;
    protected @Autowired ReservaManager manager;
    protected JsonEncoder<Reserva> encoder;
    
    @PostConstruct
    void createReservaEncoder() {
        encoder = jsonComponent.<Reserva>emptyEncoder()
            .put("reservaid", Reserva.RESERVAID)
            .put("sessaoid", Reserva.SESSAOID)
            .put("clienteid", Reserva.CLIENTEID)
            .put("custo", Reserva.CUSTO)
            .build();
    }
    
    @ResponseStatus(code = HttpStatus.OK)
    @GetMapping(path = "/reserva", produces = "application/json")
    public String list(
            @RequestParam(name = "filter", defaultValue = "[]") String filters,
            @RequestParam(name = "sort", defaultValue = "[]") String sorters,
            @RequestParam(value = "start", defaultValue = "0") long start,
            @RequestParam(value = "limit", defaultValue = "25") long limit) {
        
        return listHelper(
            ControllerUtil.parseFilters(filters, ReservaFilter::new).collect(toList()),
            ControllerUtil.parseSorts(sorters, ReservaSort::new).collect(toList()),
            start,
            limit
        );
    }
    
    protected String listHelper(
            List<Predicate<Reserva>> predicates,
            List<Comparator<Reserva>> sorters,
            long start,
            long limit) {
        Stream<Reserva> stream = manager.stream();
        
        for (final Predicate<Reserva> predicate : predicates) {
            stream = stream.filter(predicate);
        }
        
        if (!sorters.isEmpty()) {
            final Optional<Comparator<Reserva>> comparator = sorters.stream()
                .reduce(Comparator::thenComparing);
            
            stream = stream.sorted(comparator.get());
        }
        
        return stream
            .skip(start)
            .limit(limit)
            .collect(JsonCollectors.toList(encoder));
    }
    
    @ResponseStatus(code = HttpStatus.OK)
    @GetMapping(path = "/reserva/{reservaid}", produces = "application/json")
    public String get(
            @PathVariable(name = "reservaid") int reservaid) {
        return encoder.apply(
            manager.stream()
                .filter(Reserva.RESERVAID.equal(reservaid))
                .findFirst()
                .orElseThrow(() -> new ReservaNotFoundException(reservaid))
        );
    }
    
    @ResponseStatus(code = HttpStatus.CREATED)
    @PostMapping(path = "/reserva", consumes = "application/json")
    public void create(
            @RequestBody @Validated ReservaCreateBody createBody) {
        final FieldSet<Reserva> excluded = FieldSet.allExcept(
            Reserva.RESERVAID
        );
        
        final Persister<Reserva> persister = manager.persister(excluded);
        final Reserva reserva = manager.create()
            .setSessaoid(createBody.getSessaoid())
            .setClienteid(createBody.getClienteid())
            .setCusto(createBody.getCusto())
        ;
        
        persister.accept(reserva);
    }
    
    @ResponseStatus(code = HttpStatus.OK)
    @PatchMapping(path = "/reserva/{reservaid}", consumes = "application/json")
    public void update(
            @PathVariable(name = "reservaid") int reservaid,
            @RequestBody @Validated ReservaUpdateBody updateBody) {
        final Updater<Reserva> updater = manager.updater();
        final Reserva reserva = manager.stream()
            .filter(Reserva.RESERVAID.equal(reservaid))
            .findFirst()
            .orElseThrow(() -> new ReservaNotFoundException(reservaid));
        
        reserva.setReservaid(updateBody.getReservaid());
        reserva.setSessaoid(updateBody.getSessaoid());
        reserva.setClienteid(updateBody.getClienteid());
        reserva.setCusto(updateBody.getCusto());
        
        updater.accept(reserva);
    }
    
    @ResponseStatus(code = HttpStatus.NO_CONTENT)
    @DeleteMapping(path = "/reserva/{reservaid}")
    public void delete(
            @PathVariable(name = "reservaid") int reservaid) {
        manager.stream()
            .filter(Reserva.RESERVAID.equal(reservaid))
            .forEach(manager.remover());
    }
    
    @ExceptionHandler(JsonMappingException.class)
    @ResponseStatus(HttpStatus.BAD_REQUEST)
    public String handleMissingValueError() {
        Map<String, Object> error = new HashMap<>();
        error.put("error", "Bad Request");
        error.put("status", 400);
        error.put("message", "Invalid request body: missing required fields");
        
        return Json.toJson(error, true);
    }
    
    @ExceptionHandler(JsonParseException.class)
    @ResponseStatus(HttpStatus.BAD_REQUEST)
    public String handleInvalidJsonError() {
        Map<String, Object> error = new HashMap<>();
        error.put("error", "Bad Request");
        error.put("status", 400);
        error.put("message", "Invalid request body: invalid JSON syntax");
        
        return Json.toJson(error, true);
    }
    
    /**
     * How to filter the results from the controller. This class is designed to
     * be deserialized automatically from JSON.
     */
    public static final class ReservaFilter extends AbstractFilter<Reserva> {
        
        public ReservaFilter(
                String operator,
                String property,
                String value) {
            super(operator, property, value);
        }
        
        @Override
        public Predicate<Reserva> toPredicate() {
            switch (property()) {
                case "reservaid" : {
                    final int v = Integer.parseInt(value());
                    switch (operator()) {
                        case "eq"   : return Reserva.RESERVAID.equal(v);
                        case "ne"   : return Reserva.RESERVAID.notEqual(v);
                        case "lt"   : return Reserva.RESERVAID.lessThan(v);
                        case "le"   : return Reserva.RESERVAID.lessOrEqual(v);
                        case "gt"   : return Reserva.RESERVAID.greaterThan(v);
                        case "ge"   : return Reserva.RESERVAID.greaterOrEqual(v);
                        case "like" : // Fallthrough
                        default : throw new IllegalArgumentException(
                            "'" + operator() + "' is not a valid operator for " +
                            "Reserva.reservaid."
                        );
                    }
                }
                case "sessaoid" : {
                    final int v = Integer.parseInt(value());
                    switch (operator()) {
                        case "eq"   : return Reserva.SESSAOID.equal(v);
                        case "ne"   : return Reserva.SESSAOID.notEqual(v);
                        case "lt"   : return Reserva.SESSAOID.lessThan(v);
                        case "le"   : return Reserva.SESSAOID.lessOrEqual(v);
                        case "gt"   : return Reserva.SESSAOID.greaterThan(v);
                        case "ge"   : return Reserva.SESSAOID.greaterOrEqual(v);
                        case "like" : // Fallthrough
                        default : throw new IllegalArgumentException(
                            "'" + operator() + "' is not a valid operator for " +
                            "Reserva.sessaoid."
                        );
                    }
                }
                case "clienteid" : {
                    final int v = Integer.parseInt(value());
                    switch (operator()) {
                        case "eq"   : return Reserva.CLIENTEID.equal(v);
                        case "ne"   : return Reserva.CLIENTEID.notEqual(v);
                        case "lt"   : return Reserva.CLIENTEID.lessThan(v);
                        case "le"   : return Reserva.CLIENTEID.lessOrEqual(v);
                        case "gt"   : return Reserva.CLIENTEID.greaterThan(v);
                        case "ge"   : return Reserva.CLIENTEID.greaterOrEqual(v);
                        case "like" : // Fallthrough
                        default : throw new IllegalArgumentException(
                            "'" + operator() + "' is not a valid operator for " +
                            "Reserva.clienteid."
                        );
                    }
                }
                case "custo" : {
                    final BigDecimal v = new BigDecimal(value());
                    switch (operator()) {
                        case "eq"   : return Reserva.CUSTO.equal(v);
                        case "ne"   : return Reserva.CUSTO.notEqual(v);
                        case "lt"   : return Reserva.CUSTO.lessThan(v);
                        case "le"   : return Reserva.CUSTO.lessOrEqual(v);
                        case "gt"   : return Reserva.CUSTO.greaterThan(v);
                        case "ge"   : return Reserva.CUSTO.greaterOrEqual(v);
                        case "like" : // Fallthrough
                        default : throw new IllegalArgumentException(
                            "'" + operator() + "' is not a valid operator for " +
                            "Reserva.custo."
                        );
                    }
                }
                default : throw new IllegalArgumentException(
                    "'" + property() + "' is not a valid Reserva property."
                );
            }
        }
    }
    
    /**
     * How to sort the results from the controller. This class is designed to be
     * deserialized automatically from JSON.
     */
    public static final class ReservaSort extends AbstractSort<Reserva> {
        
        public ReservaSort(String property, String direction) {
            super(property, direction);
        }
        
        @Override
        public Comparator<Reserva> toComparator() {
            final Comparator<Reserva> comparator;
            switch (property()) {
                case "reservaid" : comparator = Reserva.RESERVAID.comparator(); break;
                case "sessaoid"  : comparator = Reserva.SESSAOID.comparator();  break;
                case "clienteid" : comparator = Reserva.CLIENTEID.comparator(); break;
                case "custo"     : comparator = Reserva.CUSTO.comparator();     break;
                default : throw new IllegalArgumentException(
                    "'" + property() + "' is not a valid Reserva property."
                );
            }
            
            switch (direction()) {
                case "ASC"  : return comparator;
                case "DESC" : return comparator.reversed();
                default : throw new IllegalArgumentException(
                    "'" + direction() + "' is not a valid sort direction. " +
                    "Use either 'ASC' or 'DESC', or leave out."
                );
            }
        }
    }
    
    @ResponseStatus(HttpStatus.NOT_FOUND)
    private static class ReservaNotFoundException extends RuntimeException {
        
        public ReservaNotFoundException(int reservaid) {
            super("Reserva with reservaid '" + reservaid + "' not found");
        }
    }
    
    @JsonInclude(Include.NON_NULL)
    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class ReservaCreateBody {
        
        private final int sessaoid;
        private final int clienteid;
        private final BigDecimal custo;
        
        @JsonCreator
        public ReservaCreateBody(
                @JsonProperty("sessaoid") Integer sessaoid,
                @JsonProperty("clienteid") Integer clienteid,
                @JsonProperty("custo") BigDecimal custo) {
            this.sessaoid = Objects.requireNonNull(sessaoid, "`sessaoid` is required");
            this.clienteid = Objects.requireNonNull(clienteid, "`clienteid` is required");
            this.custo = Objects.requireNonNull(custo, "`custo` is required");
        }
        
        public int getSessaoid() {
            return this.sessaoid;
        }
        
        public int getClienteid() {
            return this.clienteid;
        }
        
        public BigDecimal getCusto() {
            return this.custo;
        }
    }
    
    @JsonInclude(Include.NON_NULL)
    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class ReservaUpdateBody {
        
        private final int reservaid;
        private final int sessaoid;
        private final int clienteid;
        private final BigDecimal custo;
        
        @JsonCreator
        public ReservaUpdateBody(
                @JsonProperty("reservaid") Integer reservaid,
                @JsonProperty("sessaoid") Integer sessaoid,
                @JsonProperty("clienteid") Integer clienteid,
                @JsonProperty("custo") BigDecimal custo) {
            this.reservaid = Objects.requireNonNull(reservaid, "`reservaid` is required");
            this.sessaoid = Objects.requireNonNull(sessaoid, "`sessaoid` is required");
            this.clienteid = Objects.requireNonNull(clienteid, "`clienteid` is required");
            this.custo = Objects.requireNonNull(custo, "`custo` is required");
        }
        
        public int getReservaid() {
            return this.reservaid;
        }
        
        public int getSessaoid() {
            return this.sessaoid;
        }
        
        public int getClienteid() {
            return this.clienteid;
        }
        
        public BigDecimal getCusto() {
            return this.custo;
        }
    }
}