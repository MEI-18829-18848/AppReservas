package com.appreservas.reservas.cliente.generated;

import com.appreservas.reservas.cliente.Cliente;
import com.appreservas.reservas.utilizador.Utilizador;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.enterprise.datastore.runtime.field.DatastoreFields;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.manager.Manager;
import com.speedment.runtime.core.util.OptionalUtil;
import com.speedment.runtime.field.ComparableField;
import com.speedment.runtime.field.IntField;
import com.speedment.runtime.field.IntForeignKeyField;
import com.speedment.runtime.field.StringField;
import com.speedment.runtime.typemapper.TypeMapper;

import java.util.Optional;
import java.util.OptionalInt;

/**
 * The generated base for the {@link
 * com.appreservas.reservas.cliente.Cliente}-interface representing
 * entities of the {@code cliente}-table in the database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public interface GeneratedCliente {
    
    /**
     * This Field corresponds to the {@link Cliente} field that can be obtained
     * using the {@link Cliente#getClienteid()} method.
     */
    IntField<Cliente, Integer> CLIENTEID = DatastoreFields.createIntField(
        Identifier.CLIENTEID,
        Cliente::getClienteid,
        Cliente::setClienteid,
        TypeMapper.primitive(),
        true
    );
    /**
     * This Field corresponds to the {@link Cliente} field that can be obtained
     * using the {@link Cliente#getUserid()} method.
     */
    IntForeignKeyField<Cliente, Integer, Utilizador> USERID = DatastoreFields.createIntForeignKeyField(
        Identifier.USERID,
        Cliente::getUserid,
        Cliente::setUserid,
        Utilizador.UTILIZADORID,
        TypeMapper.primitive(),
        false
    );
    /**
     * This Field corresponds to the {@link Cliente} field that can be obtained
     * using the {@link Cliente#getNome()} method.
     */
    StringField<Cliente, String> NOME = DatastoreFields.createStringField(
        Identifier.NOME,
        Cliente::getNome,
        Cliente::setNome,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Cliente} field that can be obtained
     * using the {@link Cliente#getTelemovel()} method.
     */
    ComparableField<Cliente, Integer, Integer> TELEMOVEL = DatastoreFields.createComparableField(
        Identifier.TELEMOVEL,
        o -> OptionalUtil.unwrap(o.getTelemovel()),
        Cliente::setTelemovel,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Cliente} field that can be obtained
     * using the {@link Cliente#getEmail()} method.
     */
    StringField<Cliente, String> EMAIL = DatastoreFields.createStringField(
        Identifier.EMAIL,
        o -> OptionalUtil.unwrap(o.getEmail()),
        Cliente::setEmail,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Cliente} field that can be obtained
     * using the {@link Cliente#getNif()} method.
     */
    ComparableField<Cliente, Integer, Integer> NIF = DatastoreFields.createComparableField(
        Identifier.NIF,
        o -> OptionalUtil.unwrap(o.getNif()),
        Cliente::setNif,
        TypeMapper.identity(),
        false
    );
    
    /**
     * Returns the clienteid of this Cliente. The clienteid field corresponds to
     * the database column appreservas.reservas.cliente.clienteid.
     * 
     * @return the clienteid of this Cliente
     */
    int getClienteid();
    
    /**
     * Returns the userid of this Cliente. The userid field corresponds to the
     * database column appreservas.reservas.cliente.userid.
     * 
     * @return the userid of this Cliente
     */
    int getUserid();
    
    /**
     * Returns the nome of this Cliente. The nome field corresponds to the
     * database column appreservas.reservas.cliente.nome.
     * 
     * @return the nome of this Cliente
     */
    String getNome();
    
    /**
     * Returns the telemovel of this Cliente. The telemovel field corresponds to
     * the database column appreservas.reservas.cliente.telemovel.
     * 
     * @return the telemovel of this Cliente
     */
    OptionalInt getTelemovel();
    
    /**
     * Returns the email of this Cliente. The email field corresponds to the
     * database column appreservas.reservas.cliente.email.
     * 
     * @return the email of this Cliente
     */
    Optional<String> getEmail();
    
    /**
     * Returns the nif of this Cliente. The nif field corresponds to the
     * database column appreservas.reservas.cliente.nif.
     * 
     * @return the nif of this Cliente
     */
    OptionalInt getNif();
    
    /**
     * Sets the clienteid of this Cliente. The clienteid field corresponds to
     * the database column appreservas.reservas.cliente.clienteid.
     * 
     * @param clienteid to set of this Cliente
     * @return          this Cliente instance
     */
    Cliente setClienteid(int clienteid);
    
    /**
     * Sets the userid of this Cliente. The userid field corresponds to the
     * database column appreservas.reservas.cliente.userid.
     * 
     * @param userid to set of this Cliente
     * @return       this Cliente instance
     */
    Cliente setUserid(int userid);
    
    /**
     * Sets the nome of this Cliente. The nome field corresponds to the database
     * column appreservas.reservas.cliente.nome.
     * 
     * @param nome to set of this Cliente
     * @return     this Cliente instance
     */
    Cliente setNome(String nome);
    
    /**
     * Sets the telemovel of this Cliente. The telemovel field corresponds to
     * the database column appreservas.reservas.cliente.telemovel.
     * 
     * @param telemovel to set of this Cliente
     * @return          this Cliente instance
     */
    Cliente setTelemovel(Integer telemovel);
    
    /**
     * Sets the email of this Cliente. The email field corresponds to the
     * database column appreservas.reservas.cliente.email.
     * 
     * @param email to set of this Cliente
     * @return      this Cliente instance
     */
    Cliente setEmail(String email);
    
    /**
     * Sets the nif of this Cliente. The nif field corresponds to the database
     * column appreservas.reservas.cliente.nif.
     * 
     * @param nif to set of this Cliente
     * @return    this Cliente instance
     */
    Cliente setNif(Integer nif);
    
    /**
     * Queries the specified manager for the referenced Utilizador. If no such
     * Utilizador exists, an {@code NullPointerException} will be thrown.
     * 
     * @param foreignManager the manager to query for the entity
     * @return               the foreign entity referenced
     */
    Utilizador findUserid(Manager<Utilizador> foreignManager);
    
    enum Identifier implements ColumnIdentifier<Cliente> {
        
        CLIENTEID ("clienteid"),
        USERID    ("userid"),
        NOME      ("nome"),
        TELEMOVEL ("telemovel"),
        EMAIL     ("email"),
        NIF       ("nif");
        
        private final String columnId;
        private final TableIdentifier<Cliente> tableIdentifier;
        
        Identifier(String columnId) {
            this.columnId        = columnId;
            this.tableIdentifier = TableIdentifier.of(    getDbmsId(), 
                getSchemaId(), 
                getTableId());
        }
        
        @Override
        public String getDbmsId() {
            return "appreservas";
        }
        
        @Override
        public String getSchemaId() {
            return "reservas";
        }
        
        @Override
        public String getTableId() {
            return "cliente";
        }
        
        @Override
        public String getColumnId() {
            return this.columnId;
        }
        
        @Override
        public TableIdentifier<Cliente> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}