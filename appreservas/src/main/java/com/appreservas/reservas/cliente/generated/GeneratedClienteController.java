package com.appreservas.reservas.cliente.generated;

import com.appreservas.reservas.cliente.Cliente;
import com.appreservas.reservas.cliente.ClienteManager;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.common.json.Json;
import com.speedment.enterprise.plugins.json.JsonCollectors;
import com.speedment.enterprise.plugins.json.JsonComponent;
import com.speedment.enterprise.plugins.json.JsonEncoder;
import com.speedment.enterprise.plugins.spring.runtime.AbstractFilter;
import com.speedment.enterprise.plugins.spring.runtime.AbstractSort;
import com.speedment.enterprise.plugins.spring.runtime.ControllerUtil;
import com.speedment.runtime.core.manager.FieldSet;
import com.speedment.runtime.core.manager.Persister;
import com.speedment.runtime.core.manager.Updater;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseStatus;

import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import java.util.function.Predicate;
import java.util.stream.Stream;
import javax.annotation.PostConstruct;

import static java.util.stream.Collectors.toList;

/**
 * The default REST controller logic for Cliente entities.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
@CrossOrigin(origins = "*", maxAge = 3600)
public abstract class GeneratedClienteController {
    
    protected @Autowired JsonComponent jsonComponent;
    protected @Autowired ClienteManager manager;
    protected JsonEncoder<Cliente> encoder;
    
    @PostConstruct
    void createClienteEncoder() {
        encoder = jsonComponent.<Cliente>emptyEncoder()
            .put("clienteid", Cliente.CLIENTEID)
            .put("nome", Cliente.NOME)
            .put("telemovel", Cliente.TELEMOVEL)
            .put("email", Cliente.EMAIL)
            .put("nif", Cliente.NIF)
            .put("appuserid", Cliente.APPUSERID)
            .build();
    }
    
    @ResponseStatus(code = HttpStatus.OK)
    @GetMapping(path = "/cliente", produces = "application/json")
    public String list(
            @RequestParam(name = "filter", defaultValue = "[]") String filters,
            @RequestParam(name = "sort", defaultValue = "[]") String sorters,
            @RequestParam(value = "start", defaultValue = "0") long start,
            @RequestParam(value = "limit", defaultValue = "25") long limit) {
        
        return listHelper(
            ControllerUtil.parseFilters(filters, ClienteFilter::new).collect(toList()),
            ControllerUtil.parseSorts(sorters, ClienteSort::new).collect(toList()),
            start,
            limit
        );
    }
    
    protected String listHelper(
            List<Predicate<Cliente>> predicates,
            List<Comparator<Cliente>> sorters,
            long start,
            long limit) {
        Stream<Cliente> stream = manager.stream();
        
        for (final Predicate<Cliente> predicate : predicates) {
            stream = stream.filter(predicate);
        }
        
        if (!sorters.isEmpty()) {
            final Optional<Comparator<Cliente>> comparator = sorters.stream()
                .reduce(Comparator::thenComparing);
            
            stream = stream.sorted(comparator.get());
        }
        
        return stream
            .skip(start)
            .limit(limit)
            .collect(JsonCollectors.toList(encoder));
    }
    
    @ResponseStatus(code = HttpStatus.OK)
    @GetMapping(path = "/cliente/{clienteid}", produces = "application/json")
    public String get(
            @PathVariable(name = "clienteid") int clienteid) {
        return encoder.apply(
            manager.stream()
                .filter(Cliente.CLIENTEID.equal(clienteid))
                .findFirst()
                .orElseThrow(() -> new ClienteNotFoundException(clienteid))
        );
    }
    
    @ResponseStatus(code = HttpStatus.CREATED)
    @PostMapping(path = "/cliente", consumes = "application/json")
    public void create(
            @RequestBody @Validated ClienteCreateBody createBody) {
        final FieldSet<Cliente> excluded = FieldSet.allExcept(
            Cliente.CLIENTEID
        );
        
        final Persister<Cliente> persister = manager.persister(excluded);
        final Cliente cliente = manager.create()
            .setNome(createBody.getNome())
            .setTelemovel(createBody.getTelemovel())
            .setEmail(createBody.getEmail())
            .setNif(createBody.getNif())
            .setAppuserid(createBody.getAppuserid())
        ;
        
        persister.accept(cliente);
    }
    
    @ResponseStatus(code = HttpStatus.OK)
    @PatchMapping(path = "/cliente/{clienteid}", consumes = "application/json")
    public void update(
            @PathVariable(name = "clienteid") int clienteid,
            @RequestBody @Validated ClienteUpdateBody updateBody) {
        final Updater<Cliente> updater = manager.updater();
        final Cliente cliente = manager.stream()
            .filter(Cliente.CLIENTEID.equal(clienteid))
            .findFirst()
            .orElseThrow(() -> new ClienteNotFoundException(clienteid));
        
        cliente.setClienteid(updateBody.getClienteid());
        cliente.setNome(updateBody.getNome());
        cliente.setTelemovel(updateBody.getTelemovel());
        cliente.setEmail(updateBody.getEmail());
        cliente.setNif(updateBody.getNif());
        cliente.setAppuserid(updateBody.getAppuserid());
        
        updater.accept(cliente);
    }
    
    @ResponseStatus(code = HttpStatus.NO_CONTENT)
    @DeleteMapping(path = "/cliente/{clienteid}")
    public void delete(
            @PathVariable(name = "clienteid") int clienteid) {
        manager.stream()
            .filter(Cliente.CLIENTEID.equal(clienteid))
            .forEach(manager.remover());
    }
    
    @ExceptionHandler(JsonMappingException.class)
    @ResponseStatus(HttpStatus.BAD_REQUEST)
    public String handleMissingValueError() {
        Map<String, Object> error = new HashMap<>();
        error.put("error", "Bad Request");
        error.put("status", 400);
        error.put("message", "Invalid request body: missing required fields");
        
        return Json.toJson(error, true);
    }
    
    @ExceptionHandler(JsonParseException.class)
    @ResponseStatus(HttpStatus.BAD_REQUEST)
    public String handleInvalidJsonError() {
        Map<String, Object> error = new HashMap<>();
        error.put("error", "Bad Request");
        error.put("status", 400);
        error.put("message", "Invalid request body: invalid JSON syntax");
        
        return Json.toJson(error, true);
    }
    
    /**
     * How to filter the results from the controller. This class is designed to
     * be deserialized automatically from JSON.
     */
    public static final class ClienteFilter extends AbstractFilter<Cliente> {
        
        public ClienteFilter(
                String operator,
                String property,
                String value) {
            super(operator, property, value);
        }
        
        @Override
        public Predicate<Cliente> toPredicate() {
            switch (property()) {
                case "clienteid" : {
                    final int v = Integer.parseInt(value());
                    switch (operator()) {
                        case "eq"   : return Cliente.CLIENTEID.equal(v);
                        case "ne"   : return Cliente.CLIENTEID.notEqual(v);
                        case "lt"   : return Cliente.CLIENTEID.lessThan(v);
                        case "le"   : return Cliente.CLIENTEID.lessOrEqual(v);
                        case "gt"   : return Cliente.CLIENTEID.greaterThan(v);
                        case "ge"   : return Cliente.CLIENTEID.greaterOrEqual(v);
                        case "like" : // Fallthrough
                        default : throw new IllegalArgumentException(
                            "'" + operator() + "' is not a valid operator for " +
                            "Cliente.clienteid."
                        );
                    }
                }
                case "nome" : {
                    final String v = value();
                    switch (operator()) {
                        case "eq"   : return Cliente.NOME.equal(v);
                        case "ne"   : return Cliente.NOME.notEqual(v);
                        case "lt"   : return Cliente.NOME.lessThan(v);
                        case "le"   : return Cliente.NOME.lessOrEqual(v);
                        case "gt"   : return Cliente.NOME.greaterThan(v);
                        case "ge"   : return Cliente.NOME.greaterOrEqual(v);
                        case "like" : return Cliente.NOME.contains(v);
                        default : throw new IllegalArgumentException(
                            "'" + operator() + "' is not a valid operator for " +
                            "Cliente.nome."
                        );
                    }
                }
                case "telemovel" : {
                    final Integer v = Integer.parseInt(value());
                    switch (operator()) {
                        case "eq"   : return Cliente.TELEMOVEL.equal(v);
                        case "ne"   : return Cliente.TELEMOVEL.notEqual(v);
                        case "lt"   : return Cliente.TELEMOVEL.lessThan(v);
                        case "le"   : return Cliente.TELEMOVEL.lessOrEqual(v);
                        case "gt"   : return Cliente.TELEMOVEL.greaterThan(v);
                        case "ge"   : return Cliente.TELEMOVEL.greaterOrEqual(v);
                        case "like" : // Fallthrough
                        default : throw new IllegalArgumentException(
                            "'" + operator() + "' is not a valid operator for " +
                            "Cliente.telemovel."
                        );
                    }
                }
                case "email" : {
                    final String v = value();
                    switch (operator()) {
                        case "eq"   : return Cliente.EMAIL.equal(v);
                        case "ne"   : return Cliente.EMAIL.notEqual(v);
                        case "lt"   : return Cliente.EMAIL.lessThan(v);
                        case "le"   : return Cliente.EMAIL.lessOrEqual(v);
                        case "gt"   : return Cliente.EMAIL.greaterThan(v);
                        case "ge"   : return Cliente.EMAIL.greaterOrEqual(v);
                        case "like" : return Cliente.EMAIL.contains(v);
                        default : throw new IllegalArgumentException(
                            "'" + operator() + "' is not a valid operator for " +
                            "Cliente.email."
                        );
                    }
                }
                case "nif" : {
                    final Integer v = Integer.parseInt(value());
                    switch (operator()) {
                        case "eq"   : return Cliente.NIF.equal(v);
                        case "ne"   : return Cliente.NIF.notEqual(v);
                        case "lt"   : return Cliente.NIF.lessThan(v);
                        case "le"   : return Cliente.NIF.lessOrEqual(v);
                        case "gt"   : return Cliente.NIF.greaterThan(v);
                        case "ge"   : return Cliente.NIF.greaterOrEqual(v);
                        case "like" : // Fallthrough
                        default : throw new IllegalArgumentException(
                            "'" + operator() + "' is not a valid operator for " +
                            "Cliente.nif."
                        );
                    }
                }
                case "appuserid" : {
                    final int v = Integer.parseInt(value());
                    switch (operator()) {
                        case "eq"   : return Cliente.APPUSERID.equal(v);
                        case "ne"   : return Cliente.APPUSERID.notEqual(v);
                        case "lt"   : return Cliente.APPUSERID.lessThan(v);
                        case "le"   : return Cliente.APPUSERID.lessOrEqual(v);
                        case "gt"   : return Cliente.APPUSERID.greaterThan(v);
                        case "ge"   : return Cliente.APPUSERID.greaterOrEqual(v);
                        case "like" : // Fallthrough
                        default : throw new IllegalArgumentException(
                            "'" + operator() + "' is not a valid operator for " +
                            "Cliente.appuserid."
                        );
                    }
                }
                default : throw new IllegalArgumentException(
                    "'" + property() + "' is not a valid Cliente property."
                );
            }
        }
    }
    
    /**
     * How to sort the results from the controller. This class is designed to be
     * deserialized automatically from JSON.
     */
    public static final class ClienteSort extends AbstractSort<Cliente> {
        
        public ClienteSort(String property, String direction) {
            super(property, direction);
        }
        
        @Override
        public Comparator<Cliente> toComparator() {
            final Comparator<Cliente> comparator;
            switch (property()) {
                case "clienteid" : comparator = Cliente.CLIENTEID.comparator(); break;
                case "nome"      : comparator = Cliente.NOME.comparator();      break;
                case "telemovel" : comparator = Cliente.TELEMOVEL.comparator(); break;
                case "email"     : comparator = Cliente.EMAIL.comparator();     break;
                case "nif"       : comparator = Cliente.NIF.comparator();       break;
                case "appuserid" : comparator = Cliente.APPUSERID.comparator(); break;
                default : throw new IllegalArgumentException(
                    "'" + property() + "' is not a valid Cliente property."
                );
            }
            
            switch (direction()) {
                case "ASC"  : return comparator;
                case "DESC" : return comparator.reversed();
                default : throw new IllegalArgumentException(
                    "'" + direction() + "' is not a valid sort direction. " +
                    "Use either 'ASC' or 'DESC', or leave out."
                );
            }
        }
    }
    
    @ResponseStatus(HttpStatus.NOT_FOUND)
    private static class ClienteNotFoundException extends RuntimeException {
        
        public ClienteNotFoundException(int clienteid) {
            super("Cliente with clienteid '" + clienteid + "' not found");
        }
    }
    
    @JsonInclude(Include.NON_NULL)
    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class ClienteCreateBody {
        
        private final String nome;
        private final Integer telemovel;
        private final String email;
        private final Integer nif;
        private final int appuserid;
        
        @JsonCreator
        public ClienteCreateBody(
                @JsonProperty("nome") String nome,
                @JsonProperty("telemovel") Integer telemovel,
                @JsonProperty("email") String email,
                @JsonProperty("nif") Integer nif,
                @JsonProperty("appuserid") Integer appuserid) {
            this.nome = Objects.requireNonNull(nome, "`nome` is required");
            this.telemovel = Objects.requireNonNull(telemovel, "`telemovel` is required");
            this.email = Objects.requireNonNull(email, "`email` is required");
            this.nif = Objects.requireNonNull(nif, "`nif` is required");
            this.appuserid = Objects.requireNonNull(appuserid, "`appuserid` is required");
        }
        
        public String getNome() {
            return this.nome;
        }
        
        public Integer getTelemovel() {
            return this.telemovel;
        }
        
        public String getEmail() {
            return this.email;
        }
        
        public Integer getNif() {
            return this.nif;
        }
        
        public int getAppuserid() {
            return this.appuserid;
        }
    }
    
    @JsonInclude(Include.NON_NULL)
    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class ClienteUpdateBody {
        
        private final int clienteid;
        private final String nome;
        private final Integer telemovel;
        private final String email;
        private final Integer nif;
        private final int appuserid;
        
        @JsonCreator
        public ClienteUpdateBody(
                @JsonProperty("clienteid") Integer clienteid,
                @JsonProperty("nome") String nome,
                @JsonProperty("telemovel") Integer telemovel,
                @JsonProperty("email") String email,
                @JsonProperty("nif") Integer nif,
                @JsonProperty("appuserid") Integer appuserid) {
            this.clienteid = Objects.requireNonNull(clienteid, "`clienteid` is required");
            this.nome = Objects.requireNonNull(nome, "`nome` is required");
            this.telemovel = Objects.requireNonNull(telemovel, "`telemovel` is required");
            this.email = Objects.requireNonNull(email, "`email` is required");
            this.nif = Objects.requireNonNull(nif, "`nif` is required");
            this.appuserid = Objects.requireNonNull(appuserid, "`appuserid` is required");
        }
        
        public int getClienteid() {
            return this.clienteid;
        }
        
        public String getNome() {
            return this.nome;
        }
        
        public Integer getTelemovel() {
            return this.telemovel;
        }
        
        public String getEmail() {
            return this.email;
        }
        
        public Integer getNif() {
            return this.nif;
        }
        
        public int getAppuserid() {
            return this.appuserid;
        }
    }
}