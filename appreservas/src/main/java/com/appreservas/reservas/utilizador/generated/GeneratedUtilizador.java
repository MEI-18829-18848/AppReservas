package com.appreservas.reservas.utilizador.generated;

import com.appreservas.reservas.utilizador.Utilizador;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.enterprise.datastore.runtime.field.DatastoreFields;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.field.IntField;
import com.speedment.runtime.field.StringField;
import com.speedment.runtime.typemapper.TypeMapper;

/**
 * The generated base for the {@link
 * com.appreservas.reservas.utilizador.Utilizador}-interface
 * representing entities of the {@code utilizador}-table in the database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public interface GeneratedUtilizador {
    
    /**
     * This Field corresponds to the {@link Utilizador} field that can be
     * obtained using the {@link Utilizador#getUtilizadorid()} method.
     */
    IntField<Utilizador, Integer> UTILIZADORID = DatastoreFields.createIntField(
        Identifier.UTILIZADORID,
        Utilizador::getUtilizadorid,
        Utilizador::setUtilizadorid,
        TypeMapper.primitive(),
        true
    );
    /**
     * This Field corresponds to the {@link Utilizador} field that can be
     * obtained using the {@link Utilizador#getRole()} method.
     */
    StringField<Utilizador, String> ROLE = DatastoreFields.createStringField(
        Identifier.ROLE,
        Utilizador::getRole,
        Utilizador::setRole,
        TypeMapper.identity(),
        false
    );
    
    /**
     * Returns the utilizadorid of this Utilizador. The utilizadorid field
     * corresponds to the database column
     * appreservas.reservas.utilizador.utilizadorid.
     * 
     * @return the utilizadorid of this Utilizador
     */
    int getUtilizadorid();
    
    /**
     * Returns the role of this Utilizador. The role field corresponds to the
     * database column appreservas.reservas.utilizador.role.
     * 
     * @return the role of this Utilizador
     */
    String getRole();
    
    /**
     * Sets the utilizadorid of this Utilizador. The utilizadorid field
     * corresponds to the database column
     * appreservas.reservas.utilizador.utilizadorid.
     * 
     * @param utilizadorid to set of this Utilizador
     * @return             this Utilizador instance
     */
    Utilizador setUtilizadorid(int utilizadorid);
    
    /**
     * Sets the role of this Utilizador. The role field corresponds to the
     * database column appreservas.reservas.utilizador.role.
     * 
     * @param role to set of this Utilizador
     * @return     this Utilizador instance
     */
    Utilizador setRole(String role);
    
    enum Identifier implements ColumnIdentifier<Utilizador> {
        
        UTILIZADORID ("utilizadorid"),
        ROLE         ("role");
        
        private final String columnId;
        private final TableIdentifier<Utilizador> tableIdentifier;
        
        Identifier(String columnId) {
            this.columnId        = columnId;
            this.tableIdentifier = TableIdentifier.of(    getDbmsId(), 
                getSchemaId(), 
                getTableId());
        }
        
        @Override
        public String getDbmsId() {
            return "appreservas";
        }
        
        @Override
        public String getSchemaId() {
            return "reservas";
        }
        
        @Override
        public String getTableId() {
            return "utilizador";
        }
        
        @Override
        public String getColumnId() {
            return this.columnId;
        }
        
        @Override
        public TableIdentifier<Utilizador> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}