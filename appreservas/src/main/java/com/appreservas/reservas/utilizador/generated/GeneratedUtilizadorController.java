package com.appreservas.reservas.utilizador.generated;

import com.appreservas.reservas.utilizador.Utilizador;
import com.appreservas.reservas.utilizador.UtilizadorManager;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.common.json.Json;
import com.speedment.enterprise.plugins.json.JsonCollectors;
import com.speedment.enterprise.plugins.json.JsonComponent;
import com.speedment.enterprise.plugins.json.JsonEncoder;
import com.speedment.enterprise.plugins.spring.runtime.AbstractFilter;
import com.speedment.enterprise.plugins.spring.runtime.AbstractSort;
import com.speedment.enterprise.plugins.spring.runtime.ControllerUtil;
import com.speedment.runtime.core.manager.FieldSet;
import com.speedment.runtime.core.manager.Persister;
import com.speedment.runtime.core.manager.Updater;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseStatus;

import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import java.util.function.Predicate;
import java.util.stream.Stream;
import javax.annotation.PostConstruct;

import static java.util.stream.Collectors.toList;

/**
 * The default REST controller logic for Utilizador entities.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
@CrossOrigin(origins = "*", maxAge = 3600)
@RequestMapping("/reservas")
public abstract class GeneratedUtilizadorController {
    
    protected @Autowired JsonComponent jsonComponent;
    protected @Autowired UtilizadorManager manager;
    protected JsonEncoder<Utilizador> encoder;
    
    @PostConstruct
    void createUtilizadorEncoder() {
        encoder = jsonComponent.<Utilizador>emptyEncoder()
            .put("utilizadorid", Utilizador.UTILIZADORID)
            .put("role", Utilizador.ROLE)
            .build();
    }
    
    @ResponseStatus(code = HttpStatus.OK)
    @GetMapping(path = "/utilizador", produces = "application/json")
    public String list(
            @RequestParam(name = "filter", defaultValue = "[]") String filters,
            @RequestParam(name = "sort", defaultValue = "[]") String sorters,
            @RequestParam(value = "start", defaultValue = "0") long start,
            @RequestParam(value = "limit", defaultValue = "25") long limit) {
        
        return listHelper(
            ControllerUtil.parseFilters(filters, UtilizadorFilter::new).collect(toList()),
            ControllerUtil.parseSorts(sorters, UtilizadorSort::new).collect(toList()),
            start,
            limit
        );
    }
    
    protected String listHelper(
            List<Predicate<Utilizador>> predicates,
            List<Comparator<Utilizador>> sorters,
            long start,
            long limit) {
        Stream<Utilizador> stream = manager.stream();
        
        for (final Predicate<Utilizador> predicate : predicates) {
            stream = stream.filter(predicate);
        }
        
        if (!sorters.isEmpty()) {
            final Optional<Comparator<Utilizador>> comparator = sorters.stream()
                .reduce(Comparator::thenComparing);
            
            stream = stream.sorted(comparator.get());
        }
        
        return stream
            .skip(start)
            .limit(limit)
            .collect(JsonCollectors.toList(encoder));
    }
    
    @ResponseStatus(code = HttpStatus.OK)
    @GetMapping(path = "/utilizador/{utilizadorid}", produces = "application/json")
    public String get(
            @PathVariable(name = "utilizadorid") int utilizadorid) {
        return encoder.apply(
            manager.stream()
                .filter(Utilizador.UTILIZADORID.equal(utilizadorid))
                .findFirst()
                .orElseThrow(() -> new UtilizadorNotFoundException(utilizadorid))
        );
    }
    
    @ResponseStatus(code = HttpStatus.CREATED)
    @PostMapping(path = "/utilizador", consumes = "application/json")
    public void create(
            @RequestBody @Validated UtilizadorCreateBody createBody) {
        final FieldSet<Utilizador> excluded = FieldSet.allExcept(
            Utilizador.UTILIZADORID
        );
        
        final Persister<Utilizador> persister = manager.persister(excluded);
        final Utilizador utilizador = manager.create()
            .setRole(createBody.getRole())
        ;
        
        persister.accept(utilizador);
    }
    
    @ResponseStatus(code = HttpStatus.OK)
    @PatchMapping(path = "/utilizador/{utilizadorid}", consumes = "application/json")
    public void update(
            @PathVariable(name = "utilizadorid") int utilizadorid,
            @RequestBody @Validated UtilizadorUpdateBody updateBody) {
        final Updater<Utilizador> updater = manager.updater();
        final Utilizador utilizador = manager.stream()
            .filter(Utilizador.UTILIZADORID.equal(utilizadorid))
            .findFirst()
            .orElseThrow(() -> new UtilizadorNotFoundException(utilizadorid));
        
        utilizador.setUtilizadorid(updateBody.getUtilizadorid());
        utilizador.setRole(updateBody.getRole());
        
        updater.accept(utilizador);
    }
    
    @ResponseStatus(code = HttpStatus.NO_CONTENT)
    @DeleteMapping(path = "/utilizador/{utilizadorid}")
    public void delete(
            @PathVariable(name = "utilizadorid") int utilizadorid) {
        manager.stream()
            .filter(Utilizador.UTILIZADORID.equal(utilizadorid))
            .forEach(manager.remover());
    }
    
    @ExceptionHandler(JsonMappingException.class)
    @ResponseStatus(HttpStatus.BAD_REQUEST)
    public String handleMissingValueError() {
        Map<String, Object> error = new HashMap<>();
        error.put("error", "Bad Request");
        error.put("status", 400);
        error.put("message", "Invalid request body: missing required fields");
        
        return Json.toJson(error, true);
    }
    
    @ExceptionHandler(JsonParseException.class)
    @ResponseStatus(HttpStatus.BAD_REQUEST)
    public String handleInvalidJsonError() {
        Map<String, Object> error = new HashMap<>();
        error.put("error", "Bad Request");
        error.put("status", 400);
        error.put("message", "Invalid request body: invalid JSON syntax");
        
        return Json.toJson(error, true);
    }
    
    /**
     * How to filter the results from the controller. This class is designed to
     * be deserialized automatically from JSON.
     */
    public static final class UtilizadorFilter extends AbstractFilter<Utilizador> {
        
        public UtilizadorFilter(
                String operator,
                String property,
                String value) {
            super(operator, property, value);
        }
        
        @Override
        public Predicate<Utilizador> toPredicate() {
            switch (property()) {
                case "utilizadorid" : {
                    final int v = Integer.parseInt(value());
                    switch (operator()) {
                        case "eq"   : return Utilizador.UTILIZADORID.equal(v);
                        case "ne"   : return Utilizador.UTILIZADORID.notEqual(v);
                        case "lt"   : return Utilizador.UTILIZADORID.lessThan(v);
                        case "le"   : return Utilizador.UTILIZADORID.lessOrEqual(v);
                        case "gt"   : return Utilizador.UTILIZADORID.greaterThan(v);
                        case "ge"   : return Utilizador.UTILIZADORID.greaterOrEqual(v);
                        case "like" : // Fallthrough
                        default : throw new IllegalArgumentException(
                            "'" + operator() + "' is not a valid operator for " +
                            "Utilizador.utilizadorid."
                        );
                    }
                }
                case "role" : {
                    final String v = value();
                    switch (operator()) {
                        case "eq"   : return Utilizador.ROLE.equal(v);
                        case "ne"   : return Utilizador.ROLE.notEqual(v);
                        case "lt"   : return Utilizador.ROLE.lessThan(v);
                        case "le"   : return Utilizador.ROLE.lessOrEqual(v);
                        case "gt"   : return Utilizador.ROLE.greaterThan(v);
                        case "ge"   : return Utilizador.ROLE.greaterOrEqual(v);
                        case "like" : return Utilizador.ROLE.contains(v);
                        default : throw new IllegalArgumentException(
                            "'" + operator() + "' is not a valid operator for " +
                            "Utilizador.role."
                        );
                    }
                }
                default : throw new IllegalArgumentException(
                    "'" + property() + "' is not a valid Utilizador property."
                );
            }
        }
    }
    
    /**
     * How to sort the results from the controller. This class is designed to be
     * deserialized automatically from JSON.
     */
    public static final class UtilizadorSort extends AbstractSort<Utilizador> {
        
        public UtilizadorSort(String property, String direction) {
            super(property, direction);
        }
        
        @Override
        public Comparator<Utilizador> toComparator() {
            final Comparator<Utilizador> comparator;
            switch (property()) {
                case "utilizadorid" : comparator = Utilizador.UTILIZADORID.comparator(); break;
                case "role"         : comparator = Utilizador.ROLE.comparator();         break;
                default : throw new IllegalArgumentException(
                    "'" + property() + "' is not a valid Utilizador property."
                );
            }
            
            switch (direction()) {
                case "ASC"  : return comparator;
                case "DESC" : return comparator.reversed();
                default : throw new IllegalArgumentException(
                    "'" + direction() + "' is not a valid sort direction. " +
                    "Use either 'ASC' or 'DESC', or leave out."
                );
            }
        }
    }
    
    @ResponseStatus(HttpStatus.NOT_FOUND)
    private static class UtilizadorNotFoundException extends RuntimeException {
        
        public UtilizadorNotFoundException(int utilizadorid) {
            super("Utilizador with utilizadorid '" + utilizadorid + "' not found");
        }
    }
    
    @JsonInclude(Include.NON_NULL)
    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class UtilizadorCreateBody {
        
        private final String role;
        
        @JsonCreator
        public UtilizadorCreateBody(
                @JsonProperty("role") String role) {
            this.role = Objects.requireNonNull(role, "`role` is required");
        }
        
        public String getRole() {
            return this.role;
        }
    }
    
    @JsonInclude(Include.NON_NULL)
    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class UtilizadorUpdateBody {
        
        private final int utilizadorid;
        private final String role;
        
        @JsonCreator
        public UtilizadorUpdateBody(
                @JsonProperty("utilizadorid") Integer utilizadorid,
                @JsonProperty("role") String role) {
            this.utilizadorid = Objects.requireNonNull(utilizadorid, "`utilizadorid` is required");
            this.role = Objects.requireNonNull(role, "`role` is required");
        }
        
        public int getUtilizadorid() {
            return this.utilizadorid;
        }
        
        public String getRole() {
            return this.role;
        }
    }
}