package com.appreservas.reservas.reservalugar.generated;

import static java.util.Collections.singletonList;
import static java.util.Objects.requireNonNull;

import java.nio.ByteBuffer;
import java.util.List;
import java.util.function.BiConsumer;
import java.util.function.LongConsumer;
import java.util.function.LongFunction;
import java.util.function.LongPredicate;
import java.util.function.LongToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongUnaryOperator;

import com.appreservas.reservas.lugar.Lugar;
import com.appreservas.reservas.reserva.Reserva;
import com.appreservas.reservas.reservalugar.Reservalugar;
import com.appreservas.reservas.reservalugar.ReservalugarImpl;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.common.function.BiLongToIntFunction;
import com.speedment.common.function.LongToBooleanFunction;
import com.speedment.common.function.LongToByteFunction;
import com.speedment.common.function.LongToCharFunction;
import com.speedment.common.function.LongToFloatFunction;
import com.speedment.common.function.LongToShortFunction;
import com.speedment.enterprise.datastore.runtime.DataStoreHolder;
import com.speedment.enterprise.datastore.runtime.entitystore.EntityStoreSerializer;
import com.speedment.enterprise.datastore.runtime.entitystore.function.EntityStoreComparator;
import com.speedment.enterprise.datastore.runtime.entitystore.function.EntityStoreCompareTo;
import com.speedment.enterprise.datastore.runtime.entitystore.function.EntityStorePredicate;
import com.speedment.enterprise.datastore.runtime.fieldcache.FieldCache;
import com.speedment.enterprise.datastore.runtime.util.SerializerUtil;
import com.speedment.runtime.config.identifier.ColumnIdentifier;

/**
 * Serializes and deserializes instances of Reservalugar.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedReservalugarEntityStoreSerializerImpl implements EntityStoreSerializer<Reservalugar> {
    
    private final LongFunction<ByteBuffer> bufferFinder;
    private final LongToIntFunction offsetFinder;
    private static final int FIELD_RESERVAID = 0;
    private static final int FIELD_LUGARID = 4;
    private static final int FKREF_RESERVALUGAR_LUGARID_FKEY = 8;
    private static final int FKREF_RESERVALUGAR_RESERVAID_FKEY = 16;
    private static final int VARSIZE_BEGINS = 24;
    
    protected GeneratedReservalugarEntityStoreSerializerImpl(final LongFunction<ByteBuffer> bufferFinder, final LongToIntFunction offsetFinder) {
        this.bufferFinder = requireNonNull(bufferFinder);
        this.offsetFinder = requireNonNull(offsetFinder);
    }
    
    @Override
    public BiConsumer<ByteBuffer, Reservalugar> serializer() {
        return (buffer, entity) -> {
            buffer.putInt(FIELD_RESERVAID, entity.getReservaid());
            buffer.putInt(FIELD_LUGARID, entity.getLugarid());
            buffer.putLong(FKREF_RESERVALUGAR_LUGARID_FKEY, -1L); // Will be set later on in the decorator()-method.
            buffer.putLong(FKREF_RESERVALUGAR_RESERVAID_FKEY, -1L); // Will be set later on in the decorator()-method.
            buffer.position(0);
            buffer.limit(VARSIZE_BEGINS);
        };
    }
    
    @Override
    public LongConsumer decorator(DataStoreHolder holder) {
        final FieldCache.OfInt lugar_lugaridFieldCache = holder.getFieldCache(Lugar.LUGARID.identifier());
        final FieldCache.OfInt reserva_reservaidFieldCache = holder.getFieldCache(Reserva.RESERVAID.identifier());
        final LongToIntFunction lugaridDeserializer = intDeserializer(Reservalugar.LUGARID.identifier());
        final LongToIntFunction reservaidDeserializer = intDeserializer(Reservalugar.RESERVAID.identifier());
        final LongUnaryOperator reservalugarLugaridFkeyResolver = ref -> {
            final int value = lugaridDeserializer.applyAsInt(ref);
            return lugar_lugaridFieldCache.any(value);
        };
        final LongUnaryOperator reservalugarReservaidFkeyResolver = ref -> {
            final int value = reservaidDeserializer.applyAsInt(ref);
            return reserva_reservaidFieldCache.any(value);
        };
        return ref -> {
            final ByteBuffer buffer = bufferFinder.apply(ref);
            final int rowOffset = offsetFinder.applyAsInt(ref);
            buffer.putLong(rowOffset + FKREF_RESERVALUGAR_LUGARID_FKEY, reservalugarLugaridFkeyResolver.applyAsLong(ref));
            buffer.putLong(rowOffset + FKREF_RESERVALUGAR_RESERVAID_FKEY, reservalugarReservaidFkeyResolver.applyAsLong(ref));
        };
    }
    
    @Override
    public LongFunction<Reservalugar> deserializer() {
        return ref -> {
            final ByteBuffer buffer = bufferFinder.apply(ref);
            final int offset = offsetFinder.applyAsInt(ref);
            final Reservalugar entity = new ReservalugarImpl();
            entity.setReservaid(buffer.getInt(offset + FIELD_RESERVAID));
            entity.setLugarid(buffer.getInt(offset + FIELD_LUGARID));
            return entity;
        };
    }
    
    @Override
    public Class<?> deserializedType(final ColumnIdentifier<Reservalugar> colId) {
        if (colId instanceof Reservalugar.Identifier) {
            final Reservalugar.Identifier _id = (Reservalugar.Identifier) colId;
            switch (_id) {
                case RESERVAID : 
                case LUGARID   : return int.class;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "reservaid" : 
                case "lugarid"   : return int.class;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public <FK_ENTITY> LongUnaryOperator finder(final ColumnIdentifier<Reservalugar> colId, final ColumnIdentifier<FK_ENTITY> fkColId) {
        return finder(singletonList(colId), singletonList(fkColId));
    }
    
    @Override
    public <FK_ENTITY> LongUnaryOperator finder(final List<ColumnIdentifier<Reservalugar>> cols, final List<ColumnIdentifier<FK_ENTITY>> fkCols) {
        final String fkName = SerializerUtil.uniqueFkName(cols, fkCols);
        switch (fkName) {
            case "{lugarid}->lugar{lugarid}": return finder("reservalugar_lugarid_fkey");
            case "{reservaid}->reserva{reservaid}": return finder("reservalugar_reservaid_fkey");
        }
        
        throw new IllegalArgumentException(
            fkName + " is not a valid foreign reference name."
        );
    }
    
    @Override
    public LongUnaryOperator finder(final String fkName) {
        switch (fkName) {
            case "reservalugar_lugarid_fkey": return ref -> bufferFinder.apply(ref).getLong(offsetFinder.applyAsInt(ref) + FKREF_RESERVALUGAR_LUGARID_FKEY);
            case "reservalugar_reservaid_fkey": return ref -> bufferFinder.apply(ref).getLong(offsetFinder.applyAsInt(ref) + FKREF_RESERVALUGAR_RESERVAID_FKEY);
        }
        
        throw new IllegalArgumentException(
            "Could not find a foreign key " + fkName + " in table 'reservalugar'."
        );
    }
    
    @Override
    public LongPredicate isNull(final ColumnIdentifier<Reservalugar> colId) {
        if (colId instanceof Reservalugar.Identifier) {
            final Reservalugar.Identifier _id = (Reservalugar.Identifier) colId;
            switch (_id) {
                case RESERVAID : 
                case LUGARID   : return ALWAYS_FALSE;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "reservaid" : 
                case "lugarid"   : return ALWAYS_FALSE;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public LongPredicate isPresent(final ColumnIdentifier<Reservalugar> colId) {
        if (colId instanceof Reservalugar.Identifier) {
            final Reservalugar.Identifier _id = (Reservalugar.Identifier) colId;
            switch (_id) {
                case RESERVAID : 
                case LUGARID   : return ALWAYS_TRUE;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "reservaid" : 
                case "lugarid"   : return ALWAYS_TRUE;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public LongToByteFunction byteDeserializer(final ColumnIdentifier<Reservalugar> colId) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type byte.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToShortFunction shortDeserializer(final ColumnIdentifier<Reservalugar> colId) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type short.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToIntFunction intDeserializer(final ColumnIdentifier<Reservalugar> colId) {
        if (colId instanceof Reservalugar.Identifier) {
            final Reservalugar.Identifier _id = (Reservalugar.Identifier) colId;
            switch (_id) {
                case RESERVAID : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + FIELD_RESERVAID);
                case LUGARID   : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + FIELD_LUGARID);
                default : {
                    throw new UnsupportedOperationException(
                        String.format("The column '%s' is either unknown or not of type int.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "reservaid" : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + FIELD_RESERVAID);
                case "lugarid"   : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + FIELD_LUGARID);
                default : {
                    throw new UnsupportedOperationException(
                        String.format("The column '%s' is either unknown or not of type int.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public LongUnaryOperator longDeserializer(final ColumnIdentifier<Reservalugar> colId) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type long.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToFloatFunction floatDeserializer(final ColumnIdentifier<Reservalugar> colId) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type float.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToDoubleFunction doubleDeserializer(final ColumnIdentifier<Reservalugar> colId) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type double.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToCharFunction charDeserializer(final ColumnIdentifier<Reservalugar> colId) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type char.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToBooleanFunction booleanDeserializer(final ColumnIdentifier<Reservalugar> colId) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type boolean.", colId.getColumnId())
        );
    }
    
    @Override
    public LongFunction<?> objectDeserializer(final ColumnIdentifier<Reservalugar> colId) {
        throw new UnsupportedOperationException(
            String.format("Unknown column name '%s'.", colId.getColumnId())
        );
    }
    
    @Override
    public BiLongToIntFunction comparator(final ColumnIdentifier<Reservalugar> colId) {
        if (colId instanceof Reservalugar.Identifier) {
            final Reservalugar.Identifier _id = (Reservalugar.Identifier) colId;
            switch (_id) {
                case RESERVAID : return (aRef, bRef) -> Integer.compare(
                    bufferFinder.apply(aRef).getInt(offsetFinder.applyAsInt(aRef) + FIELD_RESERVAID),
                    bufferFinder.apply(bRef).getInt(offsetFinder.applyAsInt(bRef) + FIELD_RESERVAID)
                );
                case LUGARID   : return (aRef, bRef) -> Integer.compare(
                    bufferFinder.apply(aRef).getInt(offsetFinder.applyAsInt(aRef) + FIELD_LUGARID),
                    bufferFinder.apply(bRef).getInt(offsetFinder.applyAsInt(bRef) + FIELD_LUGARID)
                );
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "reservaid" : return (aRef, bRef) -> Integer.compare(
                    bufferFinder.apply(aRef).getInt(offsetFinder.applyAsInt(aRef) + FIELD_RESERVAID),
                    bufferFinder.apply(bRef).getInt(offsetFinder.applyAsInt(bRef) + FIELD_RESERVAID)
                );
                case "lugarid"   : return (aRef, bRef) -> Integer.compare(
                    bufferFinder.apply(aRef).getInt(offsetFinder.applyAsInt(aRef) + FIELD_LUGARID),
                    bufferFinder.apply(bRef).getInt(offsetFinder.applyAsInt(bRef) + FIELD_LUGARID)
                );
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public BiLongToIntFunction comparatorNullsLast(final ColumnIdentifier<Reservalugar> colId) {
        if (colId instanceof Reservalugar.Identifier) {
            final Reservalugar.Identifier _id = (Reservalugar.Identifier) colId;
            switch (_id) {
                case RESERVAID : return (aRef, bRef) -> Integer.compare(
                    bufferFinder.apply(aRef).getInt(offsetFinder.applyAsInt(aRef) + FIELD_RESERVAID),
                    bufferFinder.apply(bRef).getInt(offsetFinder.applyAsInt(bRef) + FIELD_RESERVAID)
                );
                case LUGARID   : return (aRef, bRef) -> Integer.compare(
                    bufferFinder.apply(aRef).getInt(offsetFinder.applyAsInt(aRef) + FIELD_LUGARID),
                    bufferFinder.apply(bRef).getInt(offsetFinder.applyAsInt(bRef) + FIELD_LUGARID)
                );
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "reservaid" : return (aRef, bRef) -> Integer.compare(
                    bufferFinder.apply(aRef).getInt(offsetFinder.applyAsInt(aRef) + FIELD_RESERVAID),
                    bufferFinder.apply(bRef).getInt(offsetFinder.applyAsInt(bRef) + FIELD_RESERVAID)
                );
                case "lugarid"   : return (aRef, bRef) -> Integer.compare(
                    bufferFinder.apply(aRef).getInt(offsetFinder.applyAsInt(aRef) + FIELD_LUGARID),
                    bufferFinder.apply(bRef).getInt(offsetFinder.applyAsInt(bRef) + FIELD_LUGARID)
                );
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public LongToIntFunction compareToByte(final ColumnIdentifier<Reservalugar> colId, final byte value) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type byte.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToIntFunction compareToShort(final ColumnIdentifier<Reservalugar> colId, final short value) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type short.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToIntFunction compareToInt(final ColumnIdentifier<Reservalugar> colId, final int value) {
        if (colId instanceof Reservalugar.Identifier) {
            final Reservalugar.Identifier _id = (Reservalugar.Identifier) colId;
            switch (_id) {
                case RESERVAID : {
                    final int operand = value;
                    return ref -> Integer.compare(
                        bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + FIELD_RESERVAID),
                        operand
                    );
                }
                case LUGARID   : {
                    final int operand = value;
                    return ref -> Integer.compare(
                        bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + FIELD_LUGARID),
                        operand
                    );
                }
                default : {
                    throw new UnsupportedOperationException(
                        String.format("The column '%s' is either unknown or not of type int.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "reservaid" : {
                    final int operand = value;
                    return ref -> Integer.compare(
                        bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + FIELD_RESERVAID),
                        operand
                    );
                }
                case "lugarid"   : {
                    final int operand = value;
                    return ref -> Integer.compare(
                        bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + FIELD_LUGARID),
                        operand
                    );
                }
                default : {
                    throw new UnsupportedOperationException(
                        String.format("The column '%s' is either unknown or not of type int.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public LongToIntFunction compareToLong(final ColumnIdentifier<Reservalugar> colId, final long value) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type long.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToIntFunction compareToFloat(final ColumnIdentifier<Reservalugar> colId, final float value) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type float.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToIntFunction compareToDouble(final ColumnIdentifier<Reservalugar> colId, final double value) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type double.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToIntFunction compareToBoolean(final ColumnIdentifier<Reservalugar> colId, final boolean value) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type boolean.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToIntFunction compareToChar(final ColumnIdentifier<Reservalugar> colId, final char value) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type char.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToIntFunction compareToObject(final ColumnIdentifier<Reservalugar> colId, final Object value) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type object.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToIntFunction compareToNull(final ColumnIdentifier<Reservalugar> colId) {
        if (colId instanceof Reservalugar.Identifier) {
            final Reservalugar.Identifier _id = (Reservalugar.Identifier) colId;
            switch (_id) {
                case RESERVAID : 
                case LUGARID   : return ALWAYS_LESS;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "reservaid" : 
                case "lugarid"   : return ALWAYS_LESS;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public LongPredicate newPredicate(final ColumnIdentifier<Reservalugar> colId, final EntityStorePredicate predicate) {
        if (colId instanceof Reservalugar.Identifier) {
            final Reservalugar.Identifier _id = (Reservalugar.Identifier) colId;
            switch (_id) {
                case RESERVAID : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    final int begins = rowOffset + FIELD_RESERVAID;
                    return predicate.test(buffer, begins, begins + Integer.BYTES);
                };
                case LUGARID   : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    final int begins = rowOffset + FIELD_LUGARID;
                    return predicate.test(buffer, begins, begins + Integer.BYTES);
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "reservaid" : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    final int begins = rowOffset + FIELD_RESERVAID;
                    return predicate.test(buffer, begins, begins + Integer.BYTES);
                };
                case "lugarid"   : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    final int begins = rowOffset + FIELD_LUGARID;
                    return predicate.test(buffer, begins, begins + Integer.BYTES);
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public LongToIntFunction newCompareTo(final ColumnIdentifier<Reservalugar> colId, final EntityStoreCompareTo compareTo) {
        if (colId instanceof Reservalugar.Identifier) {
            final Reservalugar.Identifier _id = (Reservalugar.Identifier) colId;
            switch (_id) {
                case RESERVAID : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    final int begins = rowOffset + FIELD_RESERVAID;
                    return compareTo.compare(buffer, begins, begins + Integer.BYTES);
                };
                case LUGARID   : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    final int begins = rowOffset + FIELD_LUGARID;
                    return compareTo.compare(buffer, begins, begins + Integer.BYTES);
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "reservaid" : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    final int begins = rowOffset + FIELD_RESERVAID;
                    return compareTo.compare(buffer, begins, begins + Integer.BYTES);
                };
                case "lugarid"   : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    final int begins = rowOffset + FIELD_LUGARID;
                    return compareTo.compare(buffer, begins, begins + Integer.BYTES);
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public BiLongToIntFunction newComparator(final ColumnIdentifier<Reservalugar> colId, final EntityStoreComparator comparator) {
        if (colId instanceof Reservalugar.Identifier) {
            final Reservalugar.Identifier _id = (Reservalugar.Identifier) colId;
            switch (_id) {
                case RESERVAID : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    final int aBegins = aRowOffset + FIELD_RESERVAID;
                    final int bBegins = bRowOffset + FIELD_RESERVAID;
                    return comparator.compare(
                        aBuffer, aBegins, aBegins + Integer.BYTES,
                        bBuffer, bBegins, bBegins + Integer.BYTES
                    );
                };
                case LUGARID   : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    final int aBegins = aRowOffset + FIELD_LUGARID;
                    final int bBegins = bRowOffset + FIELD_LUGARID;
                    return comparator.compare(
                        aBuffer, aBegins, aBegins + Integer.BYTES,
                        bBuffer, bBegins, bBegins + Integer.BYTES
                    );
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "reservaid" : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    final int aBegins = aRowOffset + FIELD_RESERVAID;
                    final int bBegins = bRowOffset + FIELD_RESERVAID;
                    return comparator.compare(
                        aBuffer, aBegins, aBegins + Integer.BYTES,
                        bBuffer, bBegins, bBegins + Integer.BYTES
                    );
                };
                case "lugarid"   : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    final int aBegins = aRowOffset + FIELD_LUGARID;
                    final int bBegins = bRowOffset + FIELD_LUGARID;
                    return comparator.compare(
                        aBuffer, aBegins, aBegins + Integer.BYTES,
                        bBuffer, bBegins, bBegins + Integer.BYTES
                    );
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public LongToIntFunction sizeOf() {
        return ref -> VARSIZE_BEGINS;
    }
}