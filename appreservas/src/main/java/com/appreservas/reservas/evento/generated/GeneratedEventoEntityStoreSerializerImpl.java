package com.appreservas.reservas.evento.generated;

import static java.util.Collections.singletonList;
import static java.util.Objects.requireNonNull;

import java.nio.ByteBuffer;
import java.util.List;
import java.util.function.BiConsumer;
import java.util.function.LongConsumer;
import java.util.function.LongFunction;
import java.util.function.LongPredicate;
import java.util.function.LongToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongUnaryOperator;

import com.appreservas.reservas.evento.Evento;
import com.appreservas.reservas.evento.EventoImpl;
import com.appreservas.reservas.organizador.Organizador;
import com.appreservas.reservas.sala.Sala;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.common.function.BiLongToIntFunction;
import com.speedment.common.function.LongToBooleanFunction;
import com.speedment.common.function.LongToByteFunction;
import com.speedment.common.function.LongToCharFunction;
import com.speedment.common.function.LongToFloatFunction;
import com.speedment.common.function.LongToShortFunction;
import com.speedment.enterprise.common.bytebuffercommon.ByteBufferUtil;
import com.speedment.enterprise.datastore.runtime.DataStoreHolder;
import com.speedment.enterprise.datastore.runtime.entitystore.EntityStoreSerializer;
import com.speedment.enterprise.datastore.runtime.entitystore.function.EntityStoreComparator;
import com.speedment.enterprise.datastore.runtime.entitystore.function.EntityStoreCompareTo;
import com.speedment.enterprise.datastore.runtime.entitystore.function.EntityStorePredicate;
import com.speedment.enterprise.datastore.runtime.fieldcache.FieldCache;
import com.speedment.enterprise.datastore.runtime.throwable.DeserializationException;
import com.speedment.enterprise.datastore.runtime.throwable.Utf8Exception;
import com.speedment.enterprise.datastore.runtime.util.SerializerUtil;
import com.speedment.enterprise.datastore.runtime.util.Utf8Util;
import com.speedment.runtime.config.identifier.ColumnIdentifier;

/**
 * Serializes and deserializes instances of Evento.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedEventoEntityStoreSerializerImpl implements EntityStoreSerializer<Evento> {
    
    private final LongFunction<ByteBuffer> bufferFinder;
    private final LongToIntFunction offsetFinder;
    private static final int FIELD_EVENTOID = 0;
    private static final int FIELD_SALAID = 4;
    private static final int FIELD_ORGANIZADORID = 8;
    private static final int FKREF_EVENTO_ORGANIZADORID_FKEY = 12;
    private static final int FKREF_EVENTO_SALAID_FKEY = 20;
    private static final int ENDPOS_NOME = 28;
    private static final int ENDPOS_DESCRICAO = 32;
    private static final int ENDPOS_CATEGORIA = 36;
    private static final int ENDPOS_IMDBID = 40;
    private static final int VARSIZE_BEGINS = 44;
    
    protected GeneratedEventoEntityStoreSerializerImpl(final LongFunction<ByteBuffer> bufferFinder, final LongToIntFunction offsetFinder) {
        this.bufferFinder = requireNonNull(bufferFinder);
        this.offsetFinder = requireNonNull(offsetFinder);
    }
    
    @Override
    public BiConsumer<ByteBuffer, Evento> serializer() {
        return (buffer, entity) -> {
            int varSizePos = 0;
            buffer.putInt(FIELD_EVENTOID, entity.getEventoid());
            buffer.putInt(FIELD_SALAID, entity.getSalaid());
            buffer.putInt(FIELD_ORGANIZADORID, entity.getOrganizadorid());
            buffer.putLong(FKREF_EVENTO_ORGANIZADORID_FKEY, -1L); // Will be set later on in the decorator()-method.
            buffer.putLong(FKREF_EVENTO_SALAID_FKEY, -1L); // Will be set later on in the decorator()-method.
            if (entity.getNome().isPresent()) {
                varSizePos += ByteBufferUtil.putArrayAbsolute(buffer, VARSIZE_BEGINS + varSizePos, entity.getNome().get().getBytes());
                buffer.putInt(ENDPOS_NOME, varSizePos);
            } else {
                buffer.putInt(ENDPOS_NOME, (0x80000000 | varSizePos));
            }
            if (entity.getDescricao().isPresent()) {
                varSizePos += ByteBufferUtil.putArrayAbsolute(buffer, VARSIZE_BEGINS + varSizePos, entity.getDescricao().get().getBytes());
                buffer.putInt(ENDPOS_DESCRICAO, varSizePos);
            } else {
                buffer.putInt(ENDPOS_DESCRICAO, (0x80000000 | varSizePos));
            }
            if (entity.getCategoria().isPresent()) {
                varSizePos += ByteBufferUtil.putArrayAbsolute(buffer, VARSIZE_BEGINS + varSizePos, entity.getCategoria().get().getBytes());
                buffer.putInt(ENDPOS_CATEGORIA, varSizePos);
            } else {
                buffer.putInt(ENDPOS_CATEGORIA, (0x80000000 | varSizePos));
            }
            if (entity.getImdbid().isPresent()) {
                varSizePos += ByteBufferUtil.putArrayAbsolute(buffer, VARSIZE_BEGINS + varSizePos, entity.getImdbid().get().getBytes());
                buffer.putInt(ENDPOS_IMDBID, varSizePos);
            } else {
                buffer.putInt(ENDPOS_IMDBID, (0x80000000 | varSizePos));
            }
            buffer.position(0);
            buffer.limit(VARSIZE_BEGINS + varSizePos);
        };
    }
    
    @Override
    public LongConsumer decorator(DataStoreHolder holder) {
        final FieldCache.OfInt organizador_organizadoridFieldCache = holder.getFieldCache(Organizador.ORGANIZADORID.identifier());
        final FieldCache.OfInt sala_salaidFieldCache = holder.getFieldCache(Sala.SALAID.identifier());
        final LongToIntFunction organizadoridDeserializer = intDeserializer(Evento.ORGANIZADORID.identifier());
        final LongToIntFunction salaidDeserializer = intDeserializer(Evento.SALAID.identifier());
        final LongUnaryOperator eventoOrganizadoridFkeyResolver = ref -> {
            final int value = organizadoridDeserializer.applyAsInt(ref);
            return organizador_organizadoridFieldCache.any(value);
        };
        final LongUnaryOperator eventoSalaidFkeyResolver = ref -> {
            final int value = salaidDeserializer.applyAsInt(ref);
            return sala_salaidFieldCache.any(value);
        };
        return ref -> {
            final ByteBuffer buffer = bufferFinder.apply(ref);
            final int rowOffset = offsetFinder.applyAsInt(ref);
            buffer.putLong(rowOffset + FKREF_EVENTO_ORGANIZADORID_FKEY, eventoOrganizadoridFkeyResolver.applyAsLong(ref));
            buffer.putLong(rowOffset + FKREF_EVENTO_SALAID_FKEY, eventoSalaidFkeyResolver.applyAsLong(ref));
        };
    }
    
    @Override
    public LongFunction<Evento> deserializer() {
        return ref -> {
            final ByteBuffer buffer = bufferFinder.apply(ref);
            final int offset = offsetFinder.applyAsInt(ref);
            final Evento entity = new EventoImpl();
            entity.setEventoid(buffer.getInt(offset + FIELD_EVENTOID));
            entity.setSalaid(buffer.getInt(offset + FIELD_SALAID));
            entity.setOrganizadorid(buffer.getInt(offset + FIELD_ORGANIZADORID));
            if (buffer.getInt(offset + ENDPOS_NOME) >= 0) {
                try {
                    entity.setNome(Utf8Util.deserialize(buffer,
                        offset + VARSIZE_BEGINS + 0,
                        offset + VARSIZE_BEGINS + buffer.getInt(offset + ENDPOS_NOME)
                    ));
                } catch (final Utf8Exception ex) {
                    final LongToIntFunction sizeOf = sizeOf();
                    throw new DeserializationException(buffer, offset, sizeOf.applyAsInt(ref), ex);
                }
            }
            if (buffer.getInt(offset + ENDPOS_DESCRICAO) >= 0) {
                try {
                    entity.setDescricao(Utf8Util.deserialize(buffer,
                        offset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(offset + ENDPOS_DESCRICAO - Integer.BYTES)),
                        offset + VARSIZE_BEGINS + buffer.getInt(offset + ENDPOS_DESCRICAO)
                    ));
                } catch (final Utf8Exception ex) {
                    final LongToIntFunction sizeOf = sizeOf();
                    throw new DeserializationException(buffer, offset, sizeOf.applyAsInt(ref), ex);
                }
            }
            if (buffer.getInt(offset + ENDPOS_CATEGORIA) >= 0) {
                try {
                    entity.setCategoria(Utf8Util.deserialize(buffer,
                        offset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(offset + ENDPOS_CATEGORIA - Integer.BYTES)),
                        offset + VARSIZE_BEGINS + buffer.getInt(offset + ENDPOS_CATEGORIA)
                    ));
                } catch (final Utf8Exception ex) {
                    final LongToIntFunction sizeOf = sizeOf();
                    throw new DeserializationException(buffer, offset, sizeOf.applyAsInt(ref), ex);
                }
            }
            if (buffer.getInt(offset + ENDPOS_IMDBID) >= 0) {
                try {
                    entity.setImdbid(Utf8Util.deserialize(buffer,
                        offset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(offset + ENDPOS_IMDBID - Integer.BYTES)),
                        offset + VARSIZE_BEGINS + buffer.getInt(offset + ENDPOS_IMDBID)
                    ));
                } catch (final Utf8Exception ex) {
                    final LongToIntFunction sizeOf = sizeOf();
                    throw new DeserializationException(buffer, offset, sizeOf.applyAsInt(ref), ex);
                }
            }
            return entity;
        };
    }
    
    @Override
    public Class<?> deserializedType(final ColumnIdentifier<Evento> colId) {
        if (colId instanceof Evento.Identifier) {
            final Evento.Identifier _id = (Evento.Identifier) colId;
            switch (_id) {
                case EVENTOID      : 
                case SALAID        : 
                case ORGANIZADORID : return int.class;
                case NOME          : 
                case DESCRICAO     : 
                case CATEGORIA     : 
                case IMDBID        : return String.class;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "eventoid"      : 
                case "salaid"        : 
                case "organizadorid" : return int.class;
                case "nome"          : 
                case "descricao"     : 
                case "categoria"     : 
                case "imdbid"        : return String.class;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public <FK_ENTITY> LongUnaryOperator finder(final ColumnIdentifier<Evento> colId, final ColumnIdentifier<FK_ENTITY> fkColId) {
        return finder(singletonList(colId), singletonList(fkColId));
    }
    
    @Override
    public <FK_ENTITY> LongUnaryOperator finder(final List<ColumnIdentifier<Evento>> cols, final List<ColumnIdentifier<FK_ENTITY>> fkCols) {
        final String fkName = SerializerUtil.uniqueFkName(cols, fkCols);
        switch (fkName) {
            case "{organizadorid}->organizador{organizadorid}": return finder("evento_organizadorid_fkey");
            case "{salaid}->sala{salaid}": return finder("evento_salaid_fkey");
        }
        
        throw new IllegalArgumentException(
            fkName + " is not a valid foreign reference name."
        );
    }
    
    @Override
    public LongUnaryOperator finder(final String fkName) {
        switch (fkName) {
            case "evento_organizadorid_fkey": return ref -> bufferFinder.apply(ref).getLong(offsetFinder.applyAsInt(ref) + FKREF_EVENTO_ORGANIZADORID_FKEY);
            case "evento_salaid_fkey": return ref -> bufferFinder.apply(ref).getLong(offsetFinder.applyAsInt(ref) + FKREF_EVENTO_SALAID_FKEY);
        }
        
        throw new IllegalArgumentException(
            "Could not find a foreign key " + fkName + " in table 'evento'."
        );
    }
    
    @Override
    public LongPredicate isNull(final ColumnIdentifier<Evento> colId) {
        if (colId instanceof Evento.Identifier) {
            final Evento.Identifier _id = (Evento.Identifier) colId;
            switch (_id) {
                case EVENTOID      : 
                case SALAID        : 
                case ORGANIZADORID : return ALWAYS_FALSE;
                case NOME          : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + ENDPOS_NOME) < 0;
                case DESCRICAO     : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + ENDPOS_DESCRICAO) < 0;
                case CATEGORIA     : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + ENDPOS_CATEGORIA) < 0;
                case IMDBID        : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + ENDPOS_IMDBID) < 0;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "eventoid"      : 
                case "salaid"        : 
                case "organizadorid" : return ALWAYS_FALSE;
                case "nome"          : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + ENDPOS_NOME) < 0;
                case "descricao"     : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + ENDPOS_DESCRICAO) < 0;
                case "categoria"     : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + ENDPOS_CATEGORIA) < 0;
                case "imdbid"        : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + ENDPOS_IMDBID) < 0;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public LongPredicate isPresent(final ColumnIdentifier<Evento> colId) {
        if (colId instanceof Evento.Identifier) {
            final Evento.Identifier _id = (Evento.Identifier) colId;
            switch (_id) {
                case EVENTOID      : 
                case SALAID        : 
                case ORGANIZADORID : return ALWAYS_TRUE;
                case NOME          : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + ENDPOS_NOME) >= 0;
                case DESCRICAO     : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + ENDPOS_DESCRICAO) >= 0;
                case CATEGORIA     : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + ENDPOS_CATEGORIA) >= 0;
                case IMDBID        : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + ENDPOS_IMDBID) >= 0;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "eventoid"      : 
                case "salaid"        : 
                case "organizadorid" : return ALWAYS_TRUE;
                case "nome"          : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + ENDPOS_NOME) >= 0;
                case "descricao"     : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + ENDPOS_DESCRICAO) >= 0;
                case "categoria"     : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + ENDPOS_CATEGORIA) >= 0;
                case "imdbid"        : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + ENDPOS_IMDBID) >= 0;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public LongToByteFunction byteDeserializer(final ColumnIdentifier<Evento> colId) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type byte.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToShortFunction shortDeserializer(final ColumnIdentifier<Evento> colId) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type short.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToIntFunction intDeserializer(final ColumnIdentifier<Evento> colId) {
        if (colId instanceof Evento.Identifier) {
            final Evento.Identifier _id = (Evento.Identifier) colId;
            switch (_id) {
                case EVENTOID      : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + FIELD_EVENTOID);
                case SALAID        : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + FIELD_SALAID);
                case ORGANIZADORID : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + FIELD_ORGANIZADORID);
                default : {
                    throw new UnsupportedOperationException(
                        String.format("The column '%s' is either unknown or not of type int.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "eventoid"      : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + FIELD_EVENTOID);
                case "salaid"        : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + FIELD_SALAID);
                case "organizadorid" : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + FIELD_ORGANIZADORID);
                default : {
                    throw new UnsupportedOperationException(
                        String.format("The column '%s' is either unknown or not of type int.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public LongUnaryOperator longDeserializer(final ColumnIdentifier<Evento> colId) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type long.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToFloatFunction floatDeserializer(final ColumnIdentifier<Evento> colId) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type float.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToDoubleFunction doubleDeserializer(final ColumnIdentifier<Evento> colId) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type double.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToCharFunction charDeserializer(final ColumnIdentifier<Evento> colId) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type char.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToBooleanFunction booleanDeserializer(final ColumnIdentifier<Evento> colId) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type boolean.", colId.getColumnId())
        );
    }
    
    @Override
    public LongFunction<?> objectDeserializer(final ColumnIdentifier<Evento> colId) {
        if (colId instanceof Evento.Identifier) {
            final Evento.Identifier _id = (Evento.Identifier) colId;
            switch (_id) {
                case NOME      : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int offset = offsetFinder.applyAsInt(ref);
                    try {
                        return Utf8Util.deserialize(buffer,
                            offset + VARSIZE_BEGINS + 0,
                            offset + VARSIZE_BEGINS + buffer.getInt(offset + ENDPOS_NOME)
                        );
                    } catch (final Utf8Exception ex) {
                        final LongToIntFunction sizeOf = sizeOf();
                        throw new DeserializationException(buffer, offset, sizeOf.applyAsInt(ref), ex);
                    }
                };
                case DESCRICAO : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int offset = offsetFinder.applyAsInt(ref);
                    try {
                        return Utf8Util.deserialize(buffer,
                            offset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(offset + ENDPOS_DESCRICAO - Integer.BYTES)),
                            offset + VARSIZE_BEGINS + buffer.getInt(offset + ENDPOS_DESCRICAO)
                        );
                    } catch (final Utf8Exception ex) {
                        final LongToIntFunction sizeOf = sizeOf();
                        throw new DeserializationException(buffer, offset, sizeOf.applyAsInt(ref), ex);
                    }
                };
                case CATEGORIA : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int offset = offsetFinder.applyAsInt(ref);
                    try {
                        return Utf8Util.deserialize(buffer,
                            offset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(offset + ENDPOS_CATEGORIA - Integer.BYTES)),
                            offset + VARSIZE_BEGINS + buffer.getInt(offset + ENDPOS_CATEGORIA)
                        );
                    } catch (final Utf8Exception ex) {
                        final LongToIntFunction sizeOf = sizeOf();
                        throw new DeserializationException(buffer, offset, sizeOf.applyAsInt(ref), ex);
                    }
                };
                case IMDBID    : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int offset = offsetFinder.applyAsInt(ref);
                    try {
                        return Utf8Util.deserialize(buffer,
                            offset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(offset + ENDPOS_IMDBID - Integer.BYTES)),
                            offset + VARSIZE_BEGINS + buffer.getInt(offset + ENDPOS_IMDBID)
                        );
                    } catch (final Utf8Exception ex) {
                        final LongToIntFunction sizeOf = sizeOf();
                        throw new DeserializationException(buffer, offset, sizeOf.applyAsInt(ref), ex);
                    }
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "nome"      : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int offset = offsetFinder.applyAsInt(ref);
                    try {
                        return Utf8Util.deserialize(buffer,
                            offset + VARSIZE_BEGINS + 0,
                            offset + VARSIZE_BEGINS + buffer.getInt(offset + ENDPOS_NOME)
                        );
                    } catch (final Utf8Exception ex) {
                        final LongToIntFunction sizeOf = sizeOf();
                        throw new DeserializationException(buffer, offset, sizeOf.applyAsInt(ref), ex);
                    }
                };
                case "descricao" : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int offset = offsetFinder.applyAsInt(ref);
                    try {
                        return Utf8Util.deserialize(buffer,
                            offset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(offset + ENDPOS_DESCRICAO - Integer.BYTES)),
                            offset + VARSIZE_BEGINS + buffer.getInt(offset + ENDPOS_DESCRICAO)
                        );
                    } catch (final Utf8Exception ex) {
                        final LongToIntFunction sizeOf = sizeOf();
                        throw new DeserializationException(buffer, offset, sizeOf.applyAsInt(ref), ex);
                    }
                };
                case "categoria" : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int offset = offsetFinder.applyAsInt(ref);
                    try {
                        return Utf8Util.deserialize(buffer,
                            offset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(offset + ENDPOS_CATEGORIA - Integer.BYTES)),
                            offset + VARSIZE_BEGINS + buffer.getInt(offset + ENDPOS_CATEGORIA)
                        );
                    } catch (final Utf8Exception ex) {
                        final LongToIntFunction sizeOf = sizeOf();
                        throw new DeserializationException(buffer, offset, sizeOf.applyAsInt(ref), ex);
                    }
                };
                case "imdbid"    : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int offset = offsetFinder.applyAsInt(ref);
                    try {
                        return Utf8Util.deserialize(buffer,
                            offset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(offset + ENDPOS_IMDBID - Integer.BYTES)),
                            offset + VARSIZE_BEGINS + buffer.getInt(offset + ENDPOS_IMDBID)
                        );
                    } catch (final Utf8Exception ex) {
                        final LongToIntFunction sizeOf = sizeOf();
                        throw new DeserializationException(buffer, offset, sizeOf.applyAsInt(ref), ex);
                    }
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public BiLongToIntFunction comparator(final ColumnIdentifier<Evento> colId) {
        if (colId instanceof Evento.Identifier) {
            final Evento.Identifier _id = (Evento.Identifier) colId;
            switch (_id) {
                case EVENTOID      : return (aRef, bRef) -> Integer.compare(
                    bufferFinder.apply(aRef).getInt(offsetFinder.applyAsInt(aRef) + FIELD_EVENTOID),
                    bufferFinder.apply(bRef).getInt(offsetFinder.applyAsInt(bRef) + FIELD_EVENTOID)
                );
                case SALAID        : return (aRef, bRef) -> Integer.compare(
                    bufferFinder.apply(aRef).getInt(offsetFinder.applyAsInt(aRef) + FIELD_SALAID),
                    bufferFinder.apply(bRef).getInt(offsetFinder.applyAsInt(bRef) + FIELD_SALAID)
                );
                case ORGANIZADORID : return (aRef, bRef) -> Integer.compare(
                    bufferFinder.apply(aRef).getInt(offsetFinder.applyAsInt(aRef) + FIELD_ORGANIZADORID),
                    bufferFinder.apply(bRef).getInt(offsetFinder.applyAsInt(bRef) + FIELD_ORGANIZADORID)
                );
                case NOME          : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aStarts = aOffset + VARSIZE_BEGINS + 0;
                    final int bStarts = bOffset + VARSIZE_BEGINS + 0;
                    final int aEnds   = aOffset + VARSIZE_BEGINS + aBuf.getInt(aOffset + ENDPOS_NOME);
                    final int bEnds   = bOffset + VARSIZE_BEGINS + bBuf.getInt(bOffset + ENDPOS_NOME);
                    return ByteBufferUtil.compare(
                        aBuf, aStarts, aEnds,
                        bBuf, bStarts, bEnds
                    );
                };
                case DESCRICAO     : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aStarts = aOffset + VARSIZE_BEGINS + (0x7fffffff & aBuf.getInt(aOffset + ENDPOS_DESCRICAO - Integer.BYTES));
                    final int bStarts = bOffset + VARSIZE_BEGINS + (0x7fffffff & bBuf.getInt(bOffset + ENDPOS_DESCRICAO - Integer.BYTES));
                    final int aEnds   = aOffset + VARSIZE_BEGINS + aBuf.getInt(aOffset + ENDPOS_DESCRICAO);
                    final int bEnds   = bOffset + VARSIZE_BEGINS + bBuf.getInt(bOffset + ENDPOS_DESCRICAO);
                    return ByteBufferUtil.compare(
                        aBuf, aStarts, aEnds,
                        bBuf, bStarts, bEnds
                    );
                };
                case CATEGORIA     : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aStarts = aOffset + VARSIZE_BEGINS + (0x7fffffff & aBuf.getInt(aOffset + ENDPOS_CATEGORIA - Integer.BYTES));
                    final int bStarts = bOffset + VARSIZE_BEGINS + (0x7fffffff & bBuf.getInt(bOffset + ENDPOS_CATEGORIA - Integer.BYTES));
                    final int aEnds   = aOffset + VARSIZE_BEGINS + aBuf.getInt(aOffset + ENDPOS_CATEGORIA);
                    final int bEnds   = bOffset + VARSIZE_BEGINS + bBuf.getInt(bOffset + ENDPOS_CATEGORIA);
                    return ByteBufferUtil.compare(
                        aBuf, aStarts, aEnds,
                        bBuf, bStarts, bEnds
                    );
                };
                case IMDBID        : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aStarts = aOffset + VARSIZE_BEGINS + (0x7fffffff & aBuf.getInt(aOffset + ENDPOS_IMDBID - Integer.BYTES));
                    final int bStarts = bOffset + VARSIZE_BEGINS + (0x7fffffff & bBuf.getInt(bOffset + ENDPOS_IMDBID - Integer.BYTES));
                    final int aEnds   = aOffset + VARSIZE_BEGINS + aBuf.getInt(aOffset + ENDPOS_IMDBID);
                    final int bEnds   = bOffset + VARSIZE_BEGINS + bBuf.getInt(bOffset + ENDPOS_IMDBID);
                    return ByteBufferUtil.compare(
                        aBuf, aStarts, aEnds,
                        bBuf, bStarts, bEnds
                    );
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "eventoid"      : return (aRef, bRef) -> Integer.compare(
                    bufferFinder.apply(aRef).getInt(offsetFinder.applyAsInt(aRef) + FIELD_EVENTOID),
                    bufferFinder.apply(bRef).getInt(offsetFinder.applyAsInt(bRef) + FIELD_EVENTOID)
                );
                case "salaid"        : return (aRef, bRef) -> Integer.compare(
                    bufferFinder.apply(aRef).getInt(offsetFinder.applyAsInt(aRef) + FIELD_SALAID),
                    bufferFinder.apply(bRef).getInt(offsetFinder.applyAsInt(bRef) + FIELD_SALAID)
                );
                case "organizadorid" : return (aRef, bRef) -> Integer.compare(
                    bufferFinder.apply(aRef).getInt(offsetFinder.applyAsInt(aRef) + FIELD_ORGANIZADORID),
                    bufferFinder.apply(bRef).getInt(offsetFinder.applyAsInt(bRef) + FIELD_ORGANIZADORID)
                );
                case "nome"          : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aStarts = aOffset + VARSIZE_BEGINS + 0;
                    final int bStarts = bOffset + VARSIZE_BEGINS + 0;
                    final int aEnds   = aOffset + VARSIZE_BEGINS + aBuf.getInt(aOffset + ENDPOS_NOME);
                    final int bEnds   = bOffset + VARSIZE_BEGINS + bBuf.getInt(bOffset + ENDPOS_NOME);
                    return ByteBufferUtil.compare(
                        aBuf, aStarts, aEnds,
                        bBuf, bStarts, bEnds
                    );
                };
                case "descricao"     : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aStarts = aOffset + VARSIZE_BEGINS + (0x7fffffff & aBuf.getInt(aOffset + ENDPOS_DESCRICAO - Integer.BYTES));
                    final int bStarts = bOffset + VARSIZE_BEGINS + (0x7fffffff & bBuf.getInt(bOffset + ENDPOS_DESCRICAO - Integer.BYTES));
                    final int aEnds   = aOffset + VARSIZE_BEGINS + aBuf.getInt(aOffset + ENDPOS_DESCRICAO);
                    final int bEnds   = bOffset + VARSIZE_BEGINS + bBuf.getInt(bOffset + ENDPOS_DESCRICAO);
                    return ByteBufferUtil.compare(
                        aBuf, aStarts, aEnds,
                        bBuf, bStarts, bEnds
                    );
                };
                case "categoria"     : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aStarts = aOffset + VARSIZE_BEGINS + (0x7fffffff & aBuf.getInt(aOffset + ENDPOS_CATEGORIA - Integer.BYTES));
                    final int bStarts = bOffset + VARSIZE_BEGINS + (0x7fffffff & bBuf.getInt(bOffset + ENDPOS_CATEGORIA - Integer.BYTES));
                    final int aEnds   = aOffset + VARSIZE_BEGINS + aBuf.getInt(aOffset + ENDPOS_CATEGORIA);
                    final int bEnds   = bOffset + VARSIZE_BEGINS + bBuf.getInt(bOffset + ENDPOS_CATEGORIA);
                    return ByteBufferUtil.compare(
                        aBuf, aStarts, aEnds,
                        bBuf, bStarts, bEnds
                    );
                };
                case "imdbid"        : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aStarts = aOffset + VARSIZE_BEGINS + (0x7fffffff & aBuf.getInt(aOffset + ENDPOS_IMDBID - Integer.BYTES));
                    final int bStarts = bOffset + VARSIZE_BEGINS + (0x7fffffff & bBuf.getInt(bOffset + ENDPOS_IMDBID - Integer.BYTES));
                    final int aEnds   = aOffset + VARSIZE_BEGINS + aBuf.getInt(aOffset + ENDPOS_IMDBID);
                    final int bEnds   = bOffset + VARSIZE_BEGINS + bBuf.getInt(bOffset + ENDPOS_IMDBID);
                    return ByteBufferUtil.compare(
                        aBuf, aStarts, aEnds,
                        bBuf, bStarts, bEnds
                    );
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public BiLongToIntFunction comparatorNullsLast(final ColumnIdentifier<Evento> colId) {
        if (colId instanceof Evento.Identifier) {
            final Evento.Identifier _id = (Evento.Identifier) colId;
            switch (_id) {
                case EVENTOID      : return (aRef, bRef) -> Integer.compare(
                    bufferFinder.apply(aRef).getInt(offsetFinder.applyAsInt(aRef) + FIELD_EVENTOID),
                    bufferFinder.apply(bRef).getInt(offsetFinder.applyAsInt(bRef) + FIELD_EVENTOID)
                );
                case SALAID        : return (aRef, bRef) -> Integer.compare(
                    bufferFinder.apply(aRef).getInt(offsetFinder.applyAsInt(aRef) + FIELD_SALAID),
                    bufferFinder.apply(bRef).getInt(offsetFinder.applyAsInt(bRef) + FIELD_SALAID)
                );
                case ORGANIZADORID : return (aRef, bRef) -> Integer.compare(
                    bufferFinder.apply(aRef).getInt(offsetFinder.applyAsInt(aRef) + FIELD_ORGANIZADORID),
                    bufferFinder.apply(bRef).getInt(offsetFinder.applyAsInt(bRef) + FIELD_ORGANIZADORID)
                );
                case NOME          : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aStarts = aOffset + VARSIZE_BEGINS + 0;
                    final int bStarts = bOffset + VARSIZE_BEGINS + 0;
                    final int aEnds   = aBuf.getInt(aOffset + ENDPOS_NOME);
                    final int bEnds   = bBuf.getInt(bOffset + ENDPOS_NOME);
                    if (aEnds < 0 && bEnds < 0) return 0;
                    else if (aEnds < 0) return 1;
                    else if (bEnds < 0) return -1;
                    else return ByteBufferUtil.compare(
                        aBuf, aStarts, aOffset + VARSIZE_BEGINS + aEnds,
                        bBuf, bStarts, bOffset + VARSIZE_BEGINS + bEnds
                    );
                };
                case DESCRICAO     : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aStarts = aOffset + VARSIZE_BEGINS + (0x7fffffff & aBuf.getInt(aOffset + ENDPOS_DESCRICAO - Integer.BYTES));
                    final int bStarts = bOffset + VARSIZE_BEGINS + (0x7fffffff & bBuf.getInt(bOffset + ENDPOS_DESCRICAO - Integer.BYTES));
                    final int aEnds   = aBuf.getInt(aOffset + ENDPOS_DESCRICAO);
                    final int bEnds   = bBuf.getInt(bOffset + ENDPOS_DESCRICAO);
                    if (aEnds < 0 && bEnds < 0) return 0;
                    else if (aEnds < 0) return 1;
                    else if (bEnds < 0) return -1;
                    else return ByteBufferUtil.compare(
                        aBuf, aStarts, aOffset + VARSIZE_BEGINS + aEnds,
                        bBuf, bStarts, bOffset + VARSIZE_BEGINS + bEnds
                    );
                };
                case CATEGORIA     : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aStarts = aOffset + VARSIZE_BEGINS + (0x7fffffff & aBuf.getInt(aOffset + ENDPOS_CATEGORIA - Integer.BYTES));
                    final int bStarts = bOffset + VARSIZE_BEGINS + (0x7fffffff & bBuf.getInt(bOffset + ENDPOS_CATEGORIA - Integer.BYTES));
                    final int aEnds   = aBuf.getInt(aOffset + ENDPOS_CATEGORIA);
                    final int bEnds   = bBuf.getInt(bOffset + ENDPOS_CATEGORIA);
                    if (aEnds < 0 && bEnds < 0) return 0;
                    else if (aEnds < 0) return 1;
                    else if (bEnds < 0) return -1;
                    else return ByteBufferUtil.compare(
                        aBuf, aStarts, aOffset + VARSIZE_BEGINS + aEnds,
                        bBuf, bStarts, bOffset + VARSIZE_BEGINS + bEnds
                    );
                };
                case IMDBID        : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aStarts = aOffset + VARSIZE_BEGINS + (0x7fffffff & aBuf.getInt(aOffset + ENDPOS_IMDBID - Integer.BYTES));
                    final int bStarts = bOffset + VARSIZE_BEGINS + (0x7fffffff & bBuf.getInt(bOffset + ENDPOS_IMDBID - Integer.BYTES));
                    final int aEnds   = aBuf.getInt(aOffset + ENDPOS_IMDBID);
                    final int bEnds   = bBuf.getInt(bOffset + ENDPOS_IMDBID);
                    if (aEnds < 0 && bEnds < 0) return 0;
                    else if (aEnds < 0) return 1;
                    else if (bEnds < 0) return -1;
                    else return ByteBufferUtil.compare(
                        aBuf, aStarts, aOffset + VARSIZE_BEGINS + aEnds,
                        bBuf, bStarts, bOffset + VARSIZE_BEGINS + bEnds
                    );
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "eventoid"      : return (aRef, bRef) -> Integer.compare(
                    bufferFinder.apply(aRef).getInt(offsetFinder.applyAsInt(aRef) + FIELD_EVENTOID),
                    bufferFinder.apply(bRef).getInt(offsetFinder.applyAsInt(bRef) + FIELD_EVENTOID)
                );
                case "salaid"        : return (aRef, bRef) -> Integer.compare(
                    bufferFinder.apply(aRef).getInt(offsetFinder.applyAsInt(aRef) + FIELD_SALAID),
                    bufferFinder.apply(bRef).getInt(offsetFinder.applyAsInt(bRef) + FIELD_SALAID)
                );
                case "organizadorid" : return (aRef, bRef) -> Integer.compare(
                    bufferFinder.apply(aRef).getInt(offsetFinder.applyAsInt(aRef) + FIELD_ORGANIZADORID),
                    bufferFinder.apply(bRef).getInt(offsetFinder.applyAsInt(bRef) + FIELD_ORGANIZADORID)
                );
                case "nome"          : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aStarts = aOffset + VARSIZE_BEGINS + 0;
                    final int bStarts = bOffset + VARSIZE_BEGINS + 0;
                    final int aEnds   = aBuf.getInt(aOffset + ENDPOS_NOME);
                    final int bEnds   = bBuf.getInt(bOffset + ENDPOS_NOME);
                    if (aEnds < 0 && bEnds < 0) return 0;
                    else if (aEnds < 0) return 1;
                    else if (bEnds < 0) return -1;
                    else return ByteBufferUtil.compare(
                        aBuf, aStarts, aOffset + VARSIZE_BEGINS + aEnds,
                        bBuf, bStarts, bOffset + VARSIZE_BEGINS + bEnds
                    );
                };
                case "descricao"     : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aStarts = aOffset + VARSIZE_BEGINS + (0x7fffffff & aBuf.getInt(aOffset + ENDPOS_DESCRICAO - Integer.BYTES));
                    final int bStarts = bOffset + VARSIZE_BEGINS + (0x7fffffff & bBuf.getInt(bOffset + ENDPOS_DESCRICAO - Integer.BYTES));
                    final int aEnds   = aBuf.getInt(aOffset + ENDPOS_DESCRICAO);
                    final int bEnds   = bBuf.getInt(bOffset + ENDPOS_DESCRICAO);
                    if (aEnds < 0 && bEnds < 0) return 0;
                    else if (aEnds < 0) return 1;
                    else if (bEnds < 0) return -1;
                    else return ByteBufferUtil.compare(
                        aBuf, aStarts, aOffset + VARSIZE_BEGINS + aEnds,
                        bBuf, bStarts, bOffset + VARSIZE_BEGINS + bEnds
                    );
                };
                case "categoria"     : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aStarts = aOffset + VARSIZE_BEGINS + (0x7fffffff & aBuf.getInt(aOffset + ENDPOS_CATEGORIA - Integer.BYTES));
                    final int bStarts = bOffset + VARSIZE_BEGINS + (0x7fffffff & bBuf.getInt(bOffset + ENDPOS_CATEGORIA - Integer.BYTES));
                    final int aEnds   = aBuf.getInt(aOffset + ENDPOS_CATEGORIA);
                    final int bEnds   = bBuf.getInt(bOffset + ENDPOS_CATEGORIA);
                    if (aEnds < 0 && bEnds < 0) return 0;
                    else if (aEnds < 0) return 1;
                    else if (bEnds < 0) return -1;
                    else return ByteBufferUtil.compare(
                        aBuf, aStarts, aOffset + VARSIZE_BEGINS + aEnds,
                        bBuf, bStarts, bOffset + VARSIZE_BEGINS + bEnds
                    );
                };
                case "imdbid"        : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aStarts = aOffset + VARSIZE_BEGINS + (0x7fffffff & aBuf.getInt(aOffset + ENDPOS_IMDBID - Integer.BYTES));
                    final int bStarts = bOffset + VARSIZE_BEGINS + (0x7fffffff & bBuf.getInt(bOffset + ENDPOS_IMDBID - Integer.BYTES));
                    final int aEnds   = aBuf.getInt(aOffset + ENDPOS_IMDBID);
                    final int bEnds   = bBuf.getInt(bOffset + ENDPOS_IMDBID);
                    if (aEnds < 0 && bEnds < 0) return 0;
                    else if (aEnds < 0) return 1;
                    else if (bEnds < 0) return -1;
                    else return ByteBufferUtil.compare(
                        aBuf, aStarts, aOffset + VARSIZE_BEGINS + aEnds,
                        bBuf, bStarts, bOffset + VARSIZE_BEGINS + bEnds
                    );
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public LongToIntFunction compareToByte(final ColumnIdentifier<Evento> colId, final byte value) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type byte.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToIntFunction compareToShort(final ColumnIdentifier<Evento> colId, final short value) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type short.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToIntFunction compareToInt(final ColumnIdentifier<Evento> colId, final int value) {
        if (colId instanceof Evento.Identifier) {
            final Evento.Identifier _id = (Evento.Identifier) colId;
            switch (_id) {
                case EVENTOID      : {
                    final int operand = value;
                    return ref -> Integer.compare(
                        bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + FIELD_EVENTOID),
                        operand
                    );
                }
                case SALAID        : {
                    final int operand = value;
                    return ref -> Integer.compare(
                        bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + FIELD_SALAID),
                        operand
                    );
                }
                case ORGANIZADORID : {
                    final int operand = value;
                    return ref -> Integer.compare(
                        bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + FIELD_ORGANIZADORID),
                        operand
                    );
                }
                default : {
                    throw new UnsupportedOperationException(
                        String.format("The column '%s' is either unknown or not of type int.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "eventoid"      : {
                    final int operand = value;
                    return ref -> Integer.compare(
                        bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + FIELD_EVENTOID),
                        operand
                    );
                }
                case "salaid"        : {
                    final int operand = value;
                    return ref -> Integer.compare(
                        bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + FIELD_SALAID),
                        operand
                    );
                }
                case "organizadorid" : {
                    final int operand = value;
                    return ref -> Integer.compare(
                        bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + FIELD_ORGANIZADORID),
                        operand
                    );
                }
                default : {
                    throw new UnsupportedOperationException(
                        String.format("The column '%s' is either unknown or not of type int.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public LongToIntFunction compareToLong(final ColumnIdentifier<Evento> colId, final long value) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type long.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToIntFunction compareToFloat(final ColumnIdentifier<Evento> colId, final float value) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type float.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToIntFunction compareToDouble(final ColumnIdentifier<Evento> colId, final double value) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type double.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToIntFunction compareToBoolean(final ColumnIdentifier<Evento> colId, final boolean value) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type boolean.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToIntFunction compareToChar(final ColumnIdentifier<Evento> colId, final char value) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type char.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToIntFunction compareToObject(final ColumnIdentifier<Evento> colId, final Object value) {
        if (colId instanceof Evento.Identifier) {
            final Evento.Identifier _id = (Evento.Identifier) colId;
            switch (_id) {
                case NOME      : {
                    final ByteBuffer tempBuffer = ByteBuffer.wrap(((String) value).getBytes());
                    final int tempSize = tempBuffer.capacity();
                    return ref -> {
                        final ByteBuffer buffer = bufferFinder.apply(ref);
                        final int offset = offsetFinder.applyAsInt(ref);
                        return ByteBufferUtil.compare(buffer,
                            offset + VARSIZE_BEGINS + 0,
                            offset + VARSIZE_BEGINS + buffer.getInt(offset + ENDPOS_NOME),
                            tempBuffer, 0, tempSize
                        );
                    };
                }
                case DESCRICAO : {
                    final ByteBuffer tempBuffer = ByteBuffer.wrap(((String) value).getBytes());
                    final int tempSize = tempBuffer.capacity();
                    return ref -> {
                        final ByteBuffer buffer = bufferFinder.apply(ref);
                        final int offset = offsetFinder.applyAsInt(ref);
                        return ByteBufferUtil.compare(buffer,
                            offset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(offset + ENDPOS_DESCRICAO - Integer.BYTES)),
                            offset + VARSIZE_BEGINS + buffer.getInt(offset + ENDPOS_DESCRICAO),
                            tempBuffer, 0, tempSize
                        );
                    };
                }
                case CATEGORIA : {
                    final ByteBuffer tempBuffer = ByteBuffer.wrap(((String) value).getBytes());
                    final int tempSize = tempBuffer.capacity();
                    return ref -> {
                        final ByteBuffer buffer = bufferFinder.apply(ref);
                        final int offset = offsetFinder.applyAsInt(ref);
                        return ByteBufferUtil.compare(buffer,
                            offset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(offset + ENDPOS_CATEGORIA - Integer.BYTES)),
                            offset + VARSIZE_BEGINS + buffer.getInt(offset + ENDPOS_CATEGORIA),
                            tempBuffer, 0, tempSize
                        );
                    };
                }
                case IMDBID    : {
                    final ByteBuffer tempBuffer = ByteBuffer.wrap(((String) value).getBytes());
                    final int tempSize = tempBuffer.capacity();
                    return ref -> {
                        final ByteBuffer buffer = bufferFinder.apply(ref);
                        final int offset = offsetFinder.applyAsInt(ref);
                        return ByteBufferUtil.compare(buffer,
                            offset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(offset + ENDPOS_IMDBID - Integer.BYTES)),
                            offset + VARSIZE_BEGINS + buffer.getInt(offset + ENDPOS_IMDBID),
                            tempBuffer, 0, tempSize
                        );
                    };
                }
                default : {
                    throw new UnsupportedOperationException(
                        String.format("The column '%s' is either unknown or not of type object.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "nome"      : {
                    final ByteBuffer tempBuffer = ByteBuffer.wrap(((String) value).getBytes());
                    final int tempSize = tempBuffer.capacity();
                    return ref -> {
                        final ByteBuffer buffer = bufferFinder.apply(ref);
                        final int offset = offsetFinder.applyAsInt(ref);
                        return ByteBufferUtil.compare(buffer,
                            offset + VARSIZE_BEGINS + 0,
                            offset + VARSIZE_BEGINS + buffer.getInt(offset + ENDPOS_NOME),
                            tempBuffer, 0, tempSize
                        );
                    };
                }
                case "descricao" : {
                    final ByteBuffer tempBuffer = ByteBuffer.wrap(((String) value).getBytes());
                    final int tempSize = tempBuffer.capacity();
                    return ref -> {
                        final ByteBuffer buffer = bufferFinder.apply(ref);
                        final int offset = offsetFinder.applyAsInt(ref);
                        return ByteBufferUtil.compare(buffer,
                            offset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(offset + ENDPOS_DESCRICAO - Integer.BYTES)),
                            offset + VARSIZE_BEGINS + buffer.getInt(offset + ENDPOS_DESCRICAO),
                            tempBuffer, 0, tempSize
                        );
                    };
                }
                case "categoria" : {
                    final ByteBuffer tempBuffer = ByteBuffer.wrap(((String) value).getBytes());
                    final int tempSize = tempBuffer.capacity();
                    return ref -> {
                        final ByteBuffer buffer = bufferFinder.apply(ref);
                        final int offset = offsetFinder.applyAsInt(ref);
                        return ByteBufferUtil.compare(buffer,
                            offset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(offset + ENDPOS_CATEGORIA - Integer.BYTES)),
                            offset + VARSIZE_BEGINS + buffer.getInt(offset + ENDPOS_CATEGORIA),
                            tempBuffer, 0, tempSize
                        );
                    };
                }
                case "imdbid"    : {
                    final ByteBuffer tempBuffer = ByteBuffer.wrap(((String) value).getBytes());
                    final int tempSize = tempBuffer.capacity();
                    return ref -> {
                        final ByteBuffer buffer = bufferFinder.apply(ref);
                        final int offset = offsetFinder.applyAsInt(ref);
                        return ByteBufferUtil.compare(buffer,
                            offset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(offset + ENDPOS_IMDBID - Integer.BYTES)),
                            offset + VARSIZE_BEGINS + buffer.getInt(offset + ENDPOS_IMDBID),
                            tempBuffer, 0, tempSize
                        );
                    };
                }
                default : {
                    throw new UnsupportedOperationException(
                        String.format("The column '%s' is either unknown or not of type object.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public LongToIntFunction compareToNull(final ColumnIdentifier<Evento> colId) {
        if (colId instanceof Evento.Identifier) {
            final Evento.Identifier _id = (Evento.Identifier) colId;
            switch (_id) {
                case EVENTOID      : 
                case SALAID        : 
                case ORGANIZADORID : return ALWAYS_LESS;
                case NOME          : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + ENDPOS_NOME) < 0 ? 0 : -1;
                case DESCRICAO     : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + ENDPOS_DESCRICAO) < 0 ? 0 : -1;
                case CATEGORIA     : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + ENDPOS_CATEGORIA) < 0 ? 0 : -1;
                case IMDBID        : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + ENDPOS_IMDBID) < 0 ? 0 : -1;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "eventoid"      : 
                case "salaid"        : 
                case "organizadorid" : return ALWAYS_LESS;
                case "nome"          : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + ENDPOS_NOME) < 0 ? 0 : -1;
                case "descricao"     : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + ENDPOS_DESCRICAO) < 0 ? 0 : -1;
                case "categoria"     : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + ENDPOS_CATEGORIA) < 0 ? 0 : -1;
                case "imdbid"        : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + ENDPOS_IMDBID) < 0 ? 0 : -1;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public LongPredicate newPredicate(final ColumnIdentifier<Evento> colId, final EntityStorePredicate predicate) {
        if (colId instanceof Evento.Identifier) {
            final Evento.Identifier _id = (Evento.Identifier) colId;
            switch (_id) {
                case EVENTOID      : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    final int begins = rowOffset + FIELD_EVENTOID;
                    return predicate.test(buffer, begins, begins + Integer.BYTES);
                };
                case SALAID        : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    final int begins = rowOffset + FIELD_SALAID;
                    return predicate.test(buffer, begins, begins + Integer.BYTES);
                };
                case ORGANIZADORID : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    final int begins = rowOffset + FIELD_ORGANIZADORID;
                    return predicate.test(buffer, begins, begins + Integer.BYTES);
                };
                case NOME          : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return predicate.test(buffer,
                        rowOffset + VARSIZE_BEGINS,
                        rowOffset + VARSIZE_BEGINS + buffer.getInt(rowOffset + ENDPOS_NOME)
                    );
                };
                case DESCRICAO     : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return predicate.test(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(rowOffset + ENDPOS_DESCRICAO - Integer.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.getInt(rowOffset + ENDPOS_DESCRICAO)
                    );
                };
                case CATEGORIA     : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return predicate.test(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(rowOffset + ENDPOS_CATEGORIA - Integer.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.getInt(rowOffset + ENDPOS_CATEGORIA)
                    );
                };
                case IMDBID        : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return predicate.test(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(rowOffset + ENDPOS_IMDBID - Integer.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.getInt(rowOffset + ENDPOS_IMDBID)
                    );
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "eventoid"      : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    final int begins = rowOffset + FIELD_EVENTOID;
                    return predicate.test(buffer, begins, begins + Integer.BYTES);
                };
                case "salaid"        : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    final int begins = rowOffset + FIELD_SALAID;
                    return predicate.test(buffer, begins, begins + Integer.BYTES);
                };
                case "organizadorid" : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    final int begins = rowOffset + FIELD_ORGANIZADORID;
                    return predicate.test(buffer, begins, begins + Integer.BYTES);
                };
                case "nome"          : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return predicate.test(buffer,
                        rowOffset + VARSIZE_BEGINS,
                        rowOffset + VARSIZE_BEGINS + buffer.getInt(rowOffset + ENDPOS_NOME)
                    );
                };
                case "descricao"     : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return predicate.test(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(rowOffset + ENDPOS_DESCRICAO - Integer.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.getInt(rowOffset + ENDPOS_DESCRICAO)
                    );
                };
                case "categoria"     : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return predicate.test(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(rowOffset + ENDPOS_CATEGORIA - Integer.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.getInt(rowOffset + ENDPOS_CATEGORIA)
                    );
                };
                case "imdbid"        : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return predicate.test(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(rowOffset + ENDPOS_IMDBID - Integer.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.getInt(rowOffset + ENDPOS_IMDBID)
                    );
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public LongToIntFunction newCompareTo(final ColumnIdentifier<Evento> colId, final EntityStoreCompareTo compareTo) {
        if (colId instanceof Evento.Identifier) {
            final Evento.Identifier _id = (Evento.Identifier) colId;
            switch (_id) {
                case EVENTOID      : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    final int begins = rowOffset + FIELD_EVENTOID;
                    return compareTo.compare(buffer, begins, begins + Integer.BYTES);
                };
                case SALAID        : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    final int begins = rowOffset + FIELD_SALAID;
                    return compareTo.compare(buffer, begins, begins + Integer.BYTES);
                };
                case ORGANIZADORID : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    final int begins = rowOffset + FIELD_ORGANIZADORID;
                    return compareTo.compare(buffer, begins, begins + Integer.BYTES);
                };
                case NOME          : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return compareTo.compare(buffer,
                        rowOffset + VARSIZE_BEGINS,
                        rowOffset + VARSIZE_BEGINS + buffer.getInt(rowOffset + ENDPOS_NOME)
                    );
                };
                case DESCRICAO     : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return compareTo.compare(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(rowOffset + ENDPOS_DESCRICAO - Integer.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.getInt(rowOffset + ENDPOS_DESCRICAO)
                    );
                };
                case CATEGORIA     : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return compareTo.compare(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(rowOffset + ENDPOS_CATEGORIA - Integer.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.getInt(rowOffset + ENDPOS_CATEGORIA)
                    );
                };
                case IMDBID        : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return compareTo.compare(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(rowOffset + ENDPOS_IMDBID - Integer.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.getInt(rowOffset + ENDPOS_IMDBID)
                    );
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "eventoid"      : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    final int begins = rowOffset + FIELD_EVENTOID;
                    return compareTo.compare(buffer, begins, begins + Integer.BYTES);
                };
                case "salaid"        : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    final int begins = rowOffset + FIELD_SALAID;
                    return compareTo.compare(buffer, begins, begins + Integer.BYTES);
                };
                case "organizadorid" : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    final int begins = rowOffset + FIELD_ORGANIZADORID;
                    return compareTo.compare(buffer, begins, begins + Integer.BYTES);
                };
                case "nome"          : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return compareTo.compare(buffer,
                        rowOffset + VARSIZE_BEGINS,
                        rowOffset + VARSIZE_BEGINS + buffer.getInt(rowOffset + ENDPOS_NOME)
                    );
                };
                case "descricao"     : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return compareTo.compare(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(rowOffset + ENDPOS_DESCRICAO - Integer.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.getInt(rowOffset + ENDPOS_DESCRICAO)
                    );
                };
                case "categoria"     : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return compareTo.compare(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(rowOffset + ENDPOS_CATEGORIA - Integer.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.getInt(rowOffset + ENDPOS_CATEGORIA)
                    );
                };
                case "imdbid"        : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return compareTo.compare(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(rowOffset + ENDPOS_IMDBID - Integer.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.getInt(rowOffset + ENDPOS_IMDBID)
                    );
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public BiLongToIntFunction newComparator(final ColumnIdentifier<Evento> colId, final EntityStoreComparator comparator) {
        if (colId instanceof Evento.Identifier) {
            final Evento.Identifier _id = (Evento.Identifier) colId;
            switch (_id) {
                case EVENTOID      : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    final int aBegins = aRowOffset + FIELD_EVENTOID;
                    final int bBegins = bRowOffset + FIELD_EVENTOID;
                    return comparator.compare(
                        aBuffer, aBegins, aBegins + Integer.BYTES,
                        bBuffer, bBegins, bBegins + Integer.BYTES
                    );
                };
                case SALAID        : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    final int aBegins = aRowOffset + FIELD_SALAID;
                    final int bBegins = bRowOffset + FIELD_SALAID;
                    return comparator.compare(
                        aBuffer, aBegins, aBegins + Integer.BYTES,
                        bBuffer, bBegins, bBegins + Integer.BYTES
                    );
                };
                case ORGANIZADORID : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    final int aBegins = aRowOffset + FIELD_ORGANIZADORID;
                    final int bBegins = bRowOffset + FIELD_ORGANIZADORID;
                    return comparator.compare(
                        aBuffer, aBegins, aBegins + Integer.BYTES,
                        bBuffer, bBegins, bBegins + Integer.BYTES
                    );
                };
                case NOME          : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    return comparator.compare(
                        aBuffer, aRowOffset + VARSIZE_BEGINS, aRowOffset + VARSIZE_BEGINS + aBuffer.getInt(aRowOffset + ENDPOS_NOME), 
                        bBuffer, bRowOffset + VARSIZE_BEGINS, bRowOffset + VARSIZE_BEGINS + bBuffer.getInt(bRowOffset + ENDPOS_NOME)
                    );
                };
                case DESCRICAO     : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    return comparator.compare(
                        aBuffer, aRowOffset + VARSIZE_BEGINS + (0x7fffffff & aBuffer.getInt(aRowOffset + ENDPOS_DESCRICAO - Integer.BYTES)), aRowOffset + VARSIZE_BEGINS + aBuffer.getInt(aRowOffset + ENDPOS_DESCRICAO), 
                        bBuffer, bRowOffset + VARSIZE_BEGINS + (0x7fffffff & bBuffer.getInt(bRowOffset + ENDPOS_DESCRICAO - Integer.BYTES)), bRowOffset + VARSIZE_BEGINS + bBuffer.getInt(bRowOffset + ENDPOS_DESCRICAO)
                    );
                };
                case CATEGORIA     : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    return comparator.compare(
                        aBuffer, aRowOffset + VARSIZE_BEGINS + (0x7fffffff & aBuffer.getInt(aRowOffset + ENDPOS_CATEGORIA - Integer.BYTES)), aRowOffset + VARSIZE_BEGINS + aBuffer.getInt(aRowOffset + ENDPOS_CATEGORIA), 
                        bBuffer, bRowOffset + VARSIZE_BEGINS + (0x7fffffff & bBuffer.getInt(bRowOffset + ENDPOS_CATEGORIA - Integer.BYTES)), bRowOffset + VARSIZE_BEGINS + bBuffer.getInt(bRowOffset + ENDPOS_CATEGORIA)
                    );
                };
                case IMDBID        : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    return comparator.compare(
                        aBuffer, aRowOffset + VARSIZE_BEGINS + (0x7fffffff & aBuffer.getInt(aRowOffset + ENDPOS_IMDBID - Integer.BYTES)), aRowOffset + VARSIZE_BEGINS + aBuffer.getInt(aRowOffset + ENDPOS_IMDBID), 
                        bBuffer, bRowOffset + VARSIZE_BEGINS + (0x7fffffff & bBuffer.getInt(bRowOffset + ENDPOS_IMDBID - Integer.BYTES)), bRowOffset + VARSIZE_BEGINS + bBuffer.getInt(bRowOffset + ENDPOS_IMDBID)
                    );
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "eventoid"      : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    final int aBegins = aRowOffset + FIELD_EVENTOID;
                    final int bBegins = bRowOffset + FIELD_EVENTOID;
                    return comparator.compare(
                        aBuffer, aBegins, aBegins + Integer.BYTES,
                        bBuffer, bBegins, bBegins + Integer.BYTES
                    );
                };
                case "salaid"        : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    final int aBegins = aRowOffset + FIELD_SALAID;
                    final int bBegins = bRowOffset + FIELD_SALAID;
                    return comparator.compare(
                        aBuffer, aBegins, aBegins + Integer.BYTES,
                        bBuffer, bBegins, bBegins + Integer.BYTES
                    );
                };
                case "organizadorid" : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    final int aBegins = aRowOffset + FIELD_ORGANIZADORID;
                    final int bBegins = bRowOffset + FIELD_ORGANIZADORID;
                    return comparator.compare(
                        aBuffer, aBegins, aBegins + Integer.BYTES,
                        bBuffer, bBegins, bBegins + Integer.BYTES
                    );
                };
                case "nome"          : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    return comparator.compare(
                        aBuffer, aRowOffset + VARSIZE_BEGINS, aRowOffset + VARSIZE_BEGINS + aBuffer.getInt(aRowOffset + ENDPOS_NOME), 
                        bBuffer, bRowOffset + VARSIZE_BEGINS, bRowOffset + VARSIZE_BEGINS + bBuffer.getInt(bRowOffset + ENDPOS_NOME)
                    );
                };
                case "descricao"     : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    return comparator.compare(
                        aBuffer, aRowOffset + VARSIZE_BEGINS + (0x7fffffff & aBuffer.getInt(aRowOffset + ENDPOS_DESCRICAO - Integer.BYTES)), aRowOffset + VARSIZE_BEGINS + aBuffer.getInt(aRowOffset + ENDPOS_DESCRICAO), 
                        bBuffer, bRowOffset + VARSIZE_BEGINS + (0x7fffffff & bBuffer.getInt(bRowOffset + ENDPOS_DESCRICAO - Integer.BYTES)), bRowOffset + VARSIZE_BEGINS + bBuffer.getInt(bRowOffset + ENDPOS_DESCRICAO)
                    );
                };
                case "categoria"     : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    return comparator.compare(
                        aBuffer, aRowOffset + VARSIZE_BEGINS + (0x7fffffff & aBuffer.getInt(aRowOffset + ENDPOS_CATEGORIA - Integer.BYTES)), aRowOffset + VARSIZE_BEGINS + aBuffer.getInt(aRowOffset + ENDPOS_CATEGORIA), 
                        bBuffer, bRowOffset + VARSIZE_BEGINS + (0x7fffffff & bBuffer.getInt(bRowOffset + ENDPOS_CATEGORIA - Integer.BYTES)), bRowOffset + VARSIZE_BEGINS + bBuffer.getInt(bRowOffset + ENDPOS_CATEGORIA)
                    );
                };
                case "imdbid"        : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    return comparator.compare(
                        aBuffer, aRowOffset + VARSIZE_BEGINS + (0x7fffffff & aBuffer.getInt(aRowOffset + ENDPOS_IMDBID - Integer.BYTES)), aRowOffset + VARSIZE_BEGINS + aBuffer.getInt(aRowOffset + ENDPOS_IMDBID), 
                        bBuffer, bRowOffset + VARSIZE_BEGINS + (0x7fffffff & bBuffer.getInt(bRowOffset + ENDPOS_IMDBID - Integer.BYTES)), bRowOffset + VARSIZE_BEGINS + bBuffer.getInt(bRowOffset + ENDPOS_IMDBID)
                    );
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public LongToIntFunction sizeOf() {
        return ref -> VARSIZE_BEGINS + Math.abs(bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + ENDPOS_IMDBID));
    }
}