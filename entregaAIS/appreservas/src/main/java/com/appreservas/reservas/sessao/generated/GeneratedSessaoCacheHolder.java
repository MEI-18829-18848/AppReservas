package com.appreservas.reservas.sessao.generated;

import com.appreservas.reservas.sessao.Sessao;
import com.appreservas.reservas.sessao.SessaoEntityStoreSerializerImpl;
import com.appreservas.reservas.sessao.SessaoManager;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.common.tuple.Tuple2;
import com.speedment.common.tuple.Tuples;
import com.speedment.enterprise.datastore.runtime.entitystore.EntityStore;
import com.speedment.enterprise.datastore.runtime.entitystore.EntityStoreHolder;
import com.speedment.enterprise.datastore.runtime.fieldcache.FieldCache.OfComparable;
import com.speedment.enterprise.datastore.runtime.fieldcache.FieldCache.OfInt;
import com.speedment.enterprise.datastore.runtime.fieldcache.FieldCache;
import com.speedment.enterprise.datastore.runtime.fieldcache.MultiFieldCache;
import com.speedment.enterprise.datastore.runtime.statistic.Statistics;
import com.speedment.enterprise.datastore.runtime.util.DataStoreHolderUtil;
import com.speedment.enterprise.datastore.runtime.util.StatisticsUtil;
import com.speedment.runtime.bulk.PersistOperation;
import com.speedment.runtime.bulk.RemoveOperation;
import com.speedment.runtime.bulk.UpdateOperation;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.ColumnLabel;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.component.StreamSupplierComponent;
import com.speedment.runtime.field.Field;
import com.speedment.runtime.field.trait.HasIdentifier;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.Collections;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.stream.Stream;

import static java.util.Objects.requireNonNull;
import static java.util.stream.Collectors.toMap;
import static java.util.stream.Collectors.toSet;

/**
 * A holder class for the various caches that are used to speed up the {@link
 * SessaoManager}.
 * 
 * Generated by
 * com.speedment.enterprise.datastore.generator.internal.code.GeneratedEntityCacheHolderTranslator
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public final class GeneratedSessaoCacheHolder implements EntityStoreHolder<Sessao> {
    
    private final EntityStore<Sessao> entityStore;
    private final OfInt fieldSessaoidCache;
    private final OfInt fieldEventoidCache;
    private final OfInt fieldSalaidCache;
    private final OfInt fieldDuracaoCache;
    private final OfComparable<Timestamp> fieldDataCache;
    
    public GeneratedSessaoCacheHolder(
            EntityStore<Sessao> entityStore,
            OfInt fieldSessaoidCache,
            OfInt fieldEventoidCache,
            OfInt fieldSalaidCache,
            OfInt fieldDuracaoCache,
            OfComparable<Timestamp> fieldDataCache) {
        
        this.entityStore        = requireNonNull(entityStore);
        this.fieldSessaoidCache = requireNonNull(fieldSessaoidCache);
        this.fieldEventoidCache = requireNonNull(fieldEventoidCache);
        this.fieldSalaidCache   = requireNonNull(fieldSalaidCache);
        this.fieldDuracaoCache  = requireNonNull(fieldDuracaoCache);
        this.fieldDataCache     = requireNonNull(fieldDataCache);
    }
    
    @Override
    public EntityStore<Sessao> getEntityStore() {
        return entityStore;
    }
    
    @Override
    @SuppressWarnings("unchecked")
    public <CACHE extends FieldCache<CACHE>> CACHE getFieldCache(ColumnIdentifier<Sessao> columnId) {
        if (columnId instanceof Sessao.Identifier) {
            final Sessao.Identifier _id = (Sessao.Identifier) columnId;
            switch (_id) {
                case SESSAOID : return (CACHE) fieldSessaoidCache;
                case EVENTOID : return (CACHE) fieldEventoidCache;
                case SALAID   : return (CACHE) fieldSalaidCache;
                case DURACAO  : return (CACHE) fieldDuracaoCache;
                case DATA     : return (CACHE) fieldDataCache;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = columnId.getColumnId();
            switch (_colName) {
                case "sessaoid" : return (CACHE) fieldSessaoidCache;
                case "eventoid" : return (CACHE) fieldEventoidCache;
                case "salaid"   : return (CACHE) fieldSalaidCache;
                case "duracao"  : return (CACHE) fieldDuracaoCache;
                case "data"     : return (CACHE) fieldDataCache;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public boolean isHavingMultiFieldCache(ColumnIdentifier<Sessao> columnId) {
        return false;
    }
    
    public static CompletableFuture<GeneratedSessaoCacheHolder> reload(StreamSupplierComponent streamSupplier, ExecutorService executor) {
        return reload(DataStoreHolderUtil.buildEntityStore(
            streamSupplier,
            executor,
            SessaoEntityStoreSerializerImpl::new,
            TableIdentifier.of("appreservas", "reservas", "sessao")
        ), executor);
    }
    
    @Override
    public EntityStoreHolder<Sessao> recycleAndPersist(PersistOperation<Sessao> persistOperation) {
        return wrapped().recycleAndPersist(persistOperation);
    }
    
    @Override
    public EntityStoreHolder<Sessao> recycleAndRemove(RemoveOperation<Sessao> removeOperation) {
        return wrapped().recycleAndRemove(removeOperation);
    }
    
    @Override
    public EntityStoreHolder<Sessao> recycleAndUpdate(UpdateOperation<Sessao> updateOperation) {
        return wrapped().recycleAndUpdate(updateOperation);
    }
    
    private EntityStoreHolder<Sessao> wrapped() {
        // Use explicit type for Stream to improve compilation time.
        final Map<ColumnLabel, FieldCache<?>> fieldCaches = Stream.<Tuple2<HasIdentifier<Sessao>, FieldCache<?>>>of(
            Tuples.of(Sessao.SESSAOID,fieldSessaoidCache),
            Tuples.of(Sessao.EVENTOID,fieldEventoidCache),
            Tuples.of(Sessao.SALAID,  fieldSalaidCache),
            Tuples.of(Sessao.DURACAO, fieldDuracaoCache),
            Tuples.of(Sessao.DATA,    fieldDataCache)
        )
            .collect(toMap(t2 -> t2.get0().identifier().label(), Tuple2::get1));
        final Map<ColumnLabel,  Map<ColumnLabel, MultiFieldCache<?, ?, ?>>>  multiFieldCaches = createMultiCacheMap();
        final Set<ColumnIdentifier<Sessao>> columnIdentifiers = Stream.<HasIdentifier<Sessao>>of(
            Sessao.SESSAOID,
            Sessao.EVENTOID,
            Sessao.SALAID,
            Sessao.DURACAO,
            Sessao.DATA
        )
            .map(HasIdentifier::identifier)
            .collect(toSet());
        return EntityStoreHolder.of(
            entityStore,
            fieldCaches,
            multiFieldCaches,
            columnIdentifiers
        );
    }
    
    public static CompletableFuture<GeneratedSessaoCacheHolder> reload(CompletableFuture<EntityStore<Sessao>> entityStoreFuture, ExecutorService executor) {
        final CompletableFuture<FieldCache.OfInt> fieldSessaoidCacheFuture =
            DataStoreHolderUtil.buildIntCache(entityStoreFuture, executor, Sessao.SESSAOID, FieldCache.DISTINCT);
        
        final CompletableFuture<FieldCache.OfInt> fieldEventoidCacheFuture =
            DataStoreHolderUtil.buildIntCache(entityStoreFuture, executor, Sessao.EVENTOID, 0);
        
        final CompletableFuture<FieldCache.OfInt> fieldSalaidCacheFuture =
            DataStoreHolderUtil.buildIntCache(entityStoreFuture, executor, Sessao.SALAID, 0);
        
        final CompletableFuture<FieldCache.OfInt> fieldDuracaoCacheFuture =
            DataStoreHolderUtil.buildIntCache(entityStoreFuture, executor, Sessao.DURACAO, 0);
        
        final CompletableFuture<FieldCache.OfComparable<Timestamp>> fieldDataCacheFuture =
            DataStoreHolderUtil.buildComparableCache(entityStoreFuture, executor, Sessao.DATA, 0);
        
        return entityStoreFuture.thenApplyAsync(entityStore -> {
            try {
                return new GeneratedSessaoCacheHolder(
                    entityStore,
                    fieldSessaoidCacheFuture.get(),
                    fieldEventoidCacheFuture.get(),
                    fieldSalaidCacheFuture.get(),
                    fieldDuracaoCacheFuture.get(),
                    fieldDataCacheFuture.get()
                );
            } catch (final ExecutionException | InterruptedException ex) {
                throw new RuntimeException(ex);
            }
        });
    }
    
    @Override
    public void close() {
        entityStore.close();
        fieldSessaoidCache.close();
        fieldEventoidCache.close();
        fieldSalaidCache.close();
        fieldDuracaoCache.close();
        fieldDataCache.close();
    }
    
    @Override
    public Statistics getStatistics() {
        return StatisticsUtil.getStatistics(    
            this,
            entityStore.identifier(),
            Arrays.asList(
                Sessao.Identifier.SESSAOID,
                Sessao.Identifier.EVENTOID,
                Sessao.Identifier.SALAID,
                Sessao.Identifier.DURACAO,
                Sessao.Identifier.DATA
            )
        
        );
    }
    
    private Map<ColumnLabel, Map<ColumnLabel, MultiFieldCache<?, ?, ?>>> createMultiCacheMap() {
        return Collections.emptyMap();
    }
}