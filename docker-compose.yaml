version: "3.9"
services:
  db:
    image: postgres:15.1-alpine
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - '5432:5432'
    volumes: 
      - ./db-data:/var/lib/postgresql/data
          # copy the sql script to create tables
      - ./bd.sql:/docker-entrypoint-initdb.d/create_tables.sql
    networks:
        - auth
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.3.3
    container_name: elasticsearch_springboot
    environment:
        - bootstrap.memory_lock=true
        - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
        - "discovery.type=single-node"
        - xpack.security.enabled=false
    ports:
        - "9200:9200"
    volumes:
        - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
        - auth
  kibana:
    image: docker.elastic.co/kibana/kibana:8.3.3
    container_name: kibana_springboot
    ports:
        - "5601:5601"
    environment:
        ELASTICSEARCH_URL: http://elasticsearch:9200
        ELASTICSEARCH_HOSTS: '["http://elasticsearch:9200"]'
    depends_on:
        - elasticsearch
    networks:
        - auth
  logstash:
    image: docker.elastic.co/logstash/logstash:8.3.3
    container_name: logstash_springboot
    volumes:
      - ./logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro
      - ./logstash/pipeline:/usr/share/logstash/pipeline:ro
    ports:
      - "5044:5044"
      - "5000:5000/tcp"
      - "5000:5000/udp"
      - "9600:9600"
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
    networks:
      - auth
    depends_on:
      - elasticsearch
  auth-backend: 
      build: 
        context: ./auth
      ports: 
       - '8085:8085'
      environment:
        - SPRING_DATASOURCE_URL=jdbc:postgresql://db:5432/appreservas?currentSchema=auth
        - LOGSTASH_URL=logstash:5000
      depends_on:
        - db
        - logstash
        - kibana
        - elasticsearch
      networks:
        - auth
volumes:  
  db:
    driver: local
  elasticsearch_data:
    driver: local
  elastic_data: {}
networks:
  auth:

